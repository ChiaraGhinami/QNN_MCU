<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\M55_TFLite.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\M55_TFLite.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Jan 24 14:10:19 2023
<BR><P>
<H3>Maximum Stack Usage =        976 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tflite::EvalAdd(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">BRIDGE_ERROR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BRIDGE_ERROR_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">CPU0_PPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">CPU0_PPU_Handler</a><BR>
 <LI><a href="#[1a]">CTI_REQ0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CTI_REQ0_IRQHandler</a><BR>
 <LI><a href="#[1b]">CTI_REQ1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CTI_REQ1_IRQHandler</a><BR>
 <LI><a href="#[18]">DEBUG_PPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DEBUG_PPU_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">ETHERNET_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ETHERNET_Handler</a><BR>
 <LI><a href="#[34]">ETHOS_U55_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">ETHOS_U55_Handler</a><BR>
 <LI><a href="#[39]">GPIO0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">GPIO0_0_Handler</a><BR>
 <LI><a href="#[43]">GPIO0_10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">GPIO0_10_Handler</a><BR>
 <LI><a href="#[44]">GPIO0_11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">GPIO0_11_Handler</a><BR>
 <LI><a href="#[45]">GPIO0_12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">GPIO0_12_Handler</a><BR>
 <LI><a href="#[46]">GPIO0_13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">GPIO0_13_Handler</a><BR>
 <LI><a href="#[47]">GPIO0_14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">GPIO0_14_Handler</a><BR>
 <LI><a href="#[48]">GPIO0_15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">GPIO0_15_Handler</a><BR>
 <LI><a href="#[3a]">GPIO0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">GPIO0_1_Handler</a><BR>
 <LI><a href="#[3b]">GPIO0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">GPIO0_2_Handler</a><BR>
 <LI><a href="#[3c]">GPIO0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">GPIO0_3_Handler</a><BR>
 <LI><a href="#[3d]">GPIO0_4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">GPIO0_4_Handler</a><BR>
 <LI><a href="#[3e]">GPIO0_5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">GPIO0_5_Handler</a><BR>
 <LI><a href="#[3f]">GPIO0_6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">GPIO0_6_Handler</a><BR>
 <LI><a href="#[40]">GPIO0_7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">GPIO0_7_Handler</a><BR>
 <LI><a href="#[41]">GPIO0_8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">GPIO0_8_Handler</a><BR>
 <LI><a href="#[42]">GPIO0_9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">GPIO0_9_Handler</a><BR>
 <LI><a href="#[35]">GPIO0_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">GPIO0_Combined_Handler</a><BR>
 <LI><a href="#[49]">GPIO1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">GPIO1_0_Handler</a><BR>
 <LI><a href="#[53]">GPIO1_10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">GPIO1_10_Handler</a><BR>
 <LI><a href="#[54]">GPIO1_11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">GPIO1_11_Handler</a><BR>
 <LI><a href="#[55]">GPIO1_12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">GPIO1_12_Handler</a><BR>
 <LI><a href="#[56]">GPIO1_13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">GPIO1_13_Handler</a><BR>
 <LI><a href="#[57]">GPIO1_14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">GPIO1_14_Handler</a><BR>
 <LI><a href="#[58]">GPIO1_15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">GPIO1_15_Handler</a><BR>
 <LI><a href="#[4a]">GPIO1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">GPIO1_1_Handler</a><BR>
 <LI><a href="#[4b]">GPIO1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">GPIO1_2_Handler</a><BR>
 <LI><a href="#[4c]">GPIO1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">GPIO1_3_Handler</a><BR>
 <LI><a href="#[4d]">GPIO1_4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">GPIO1_4_Handler</a><BR>
 <LI><a href="#[4e]">GPIO1_5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">GPIO1_5_Handler</a><BR>
 <LI><a href="#[4f]">GPIO1_6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">GPIO1_6_Handler</a><BR>
 <LI><a href="#[50]">GPIO1_7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">GPIO1_7_Handler</a><BR>
 <LI><a href="#[51]">GPIO1_8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">GPIO1_8_Handler</a><BR>
 <LI><a href="#[52]">GPIO1_9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">GPIO1_9_Handler</a><BR>
 <LI><a href="#[36]">GPIO1_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">GPIO1_Combined_Handler</a><BR>
 <LI><a href="#[59]">GPIO2_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">GPIO2_0_Handler</a><BR>
 <LI><a href="#[63]">GPIO2_10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">GPIO2_10_Handler</a><BR>
 <LI><a href="#[64]">GPIO2_11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">GPIO2_11_Handler</a><BR>
 <LI><a href="#[65]">GPIO2_12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">GPIO2_12_Handler</a><BR>
 <LI><a href="#[66]">GPIO2_13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">GPIO2_13_Handler</a><BR>
 <LI><a href="#[67]">GPIO2_14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">GPIO2_14_Handler</a><BR>
 <LI><a href="#[68]">GPIO2_15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">GPIO2_15_Handler</a><BR>
 <LI><a href="#[5a]">GPIO2_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">GPIO2_1_Handler</a><BR>
 <LI><a href="#[5b]">GPIO2_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">GPIO2_2_Handler</a><BR>
 <LI><a href="#[5c]">GPIO2_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">GPIO2_3_Handler</a><BR>
 <LI><a href="#[5d]">GPIO2_4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">GPIO2_4_Handler</a><BR>
 <LI><a href="#[5e]">GPIO2_5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">GPIO2_5_Handler</a><BR>
 <LI><a href="#[5f]">GPIO2_6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">GPIO2_6_Handler</a><BR>
 <LI><a href="#[60]">GPIO2_7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">GPIO2_7_Handler</a><BR>
 <LI><a href="#[61]">GPIO2_8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">GPIO2_8_Handler</a><BR>
 <LI><a href="#[62]">GPIO2_9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">GPIO2_9_Handler</a><BR>
 <LI><a href="#[37]">GPIO2_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">GPIO2_Combined_Handler</a><BR>
 <LI><a href="#[69]">GPIO3_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">GPIO3_0_Handler</a><BR>
 <LI><a href="#[6a]">GPIO3_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPIO3_1_Handler</a><BR>
 <LI><a href="#[6b]">GPIO3_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">GPIO3_2_Handler</a><BR>
 <LI><a href="#[6c]">GPIO3_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIO3_3_Handler</a><BR>
 <LI><a href="#[38]">GPIO3_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">GPIO3_Combined_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[2e]">I2S_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">I2S_Handler</a><BR>
 <LI><a href="#[15]">MGMT_PPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MGMT_PPU_Handler</a><BR>
 <LI><a href="#[11]">MPC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MPC_Handler</a><BR>
 <LI><a href="#[13]">MSC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MSC_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[c]">NONSEC_WATCHDOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NONSEC_WATCHDOG_Handler</a><BR>
 <LI><a href="#[b]">NONSEC_WATCHDOG_RESET_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NONSEC_WATCHDOG_RESET_Handler</a><BR>
 <LI><a href="#[12]">PPC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PPC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SLOWCLK_Timer_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SLOWCLK_Timer_Handler</a><BR>
 <LI><a href="#[31]">SPI_ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">SPI_ADC_Handler</a><BR>
 <LI><a href="#[32]">SPI_SHIELD0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">SPI_SHIELD0_Handler</a><BR>
 <LI><a href="#[33]">SPI_SHIELD1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">SPI_SHIELD1_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[16]">SYS_PPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SYS_PPU_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">System_Timestamp_Counter_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">System_Timestamp_Counter_Handler</a><BR>
 <LI><a href="#[e]">TIMER0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">TIMER0_Handler</a><BR>
 <LI><a href="#[f]">TIMER1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">TIMER1_Handler</a><BR>
 <LI><a href="#[10]">TIMER2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">TIMER2_Handler</a><BR>
 <LI><a href="#[19]">TIMER3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">TIMER3_Handler</a><BR>
 <LI><a href="#[2f]">TOUCH_SCREEN_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">TOUCH_SCREEN_Handler</a><BR>
 <LI><a href="#[27]">UART0_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UART0_Combined_Handler</a><BR>
 <LI><a href="#[28]">UART1_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">UART1_Combined_Handler</a><BR>
 <LI><a href="#[29]">UART2_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">UART2_Combined_Handler</a><BR>
 <LI><a href="#[2a]">UART3_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UART3_Combined_Handler</a><BR>
 <LI><a href="#[2b]">UART4_Combined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">UART4_Combined_Handler</a><BR>
 <LI><a href="#[6f]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">UART5_Handler</a><BR>
 <LI><a href="#[2c]">UARTOVF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">UARTOVF_Handler</a><BR>
 <LI><a href="#[1d]">UARTRX0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">UARTRX0_Handler</a><BR>
 <LI><a href="#[1f]">UARTRX1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UARTRX1_Handler</a><BR>
 <LI><a href="#[21]">UARTRX2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UARTRX2_Handler</a><BR>
 <LI><a href="#[23]">UARTRX3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UARTRX3_Handler</a><BR>
 <LI><a href="#[25]">UARTRX4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">UARTRX4_Handler</a><BR>
 <LI><a href="#[6d]">UARTRX5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">UARTRX5_Handler</a><BR>
 <LI><a href="#[1e]">UARTTX0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">UARTTX0_Handler</a><BR>
 <LI><a href="#[20]">UARTTX1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">UARTTX1_Handler</a><BR>
 <LI><a href="#[22]">UARTTX2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UARTTX2_Handler</a><BR>
 <LI><a href="#[24]">UARTTX3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">UARTTX3_Handler</a><BR>
 <LI><a href="#[26]">UARTTX4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">UARTTX4_Handler</a><BR>
 <LI><a href="#[6e]">UARTTX5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">UARTTX5_Handler</a><BR>
 <LI><a href="#[30]">USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">USB_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[3e9]">tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3bc]">tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a><BR>
 <LI><a href="#[2fb]">void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2fb]">void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)</a><BR>
 <LI><a href="#[2a5]">void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a5]">void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">BRIDGE_ERROR_Handler</a> from startup_fvp_sse300_mps3.o(.text.BRIDGE_ERROR_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_fvp_sse300_mps3.o(.text.BusFault_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[17]">CPU0_PPU_Handler</a> from startup_fvp_sse300_mps3.o(.text.CPU0_PPU_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1a]">CTI_REQ0_IRQHandler</a> from startup_fvp_sse300_mps3.o(.text.CTI_REQ0_IRQHandler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1b]">CTI_REQ1_IRQHandler</a> from startup_fvp_sse300_mps3.o(.text.CTI_REQ1_IRQHandler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[18]">DEBUG_PPU_Handler</a> from startup_fvp_sse300_mps3.o(.text.DEBUG_PPU_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_fvp_sse300_mps3.o(.text.DebugMon_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2d]">ETHERNET_Handler</a> from startup_fvp_sse300_mps3.o(.text.ETHERNET_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[34]">ETHOS_U55_Handler</a> from startup_fvp_sse300_mps3.o(.text.ETHOS_U55_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[39]">GPIO0_0_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[43]">GPIO0_10_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_10_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[44]">GPIO0_11_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_11_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[45]">GPIO0_12_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_12_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[46]">GPIO0_13_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_13_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[47]">GPIO0_14_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_14_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[48]">GPIO0_15_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_15_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3a]">GPIO0_1_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3b]">GPIO0_2_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3c]">GPIO0_3_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3d]">GPIO0_4_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_4_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3e]">GPIO0_5_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3f]">GPIO0_6_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_6_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[40]">GPIO0_7_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_7_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[41]">GPIO0_8_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_8_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[42]">GPIO0_9_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_9_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[35]">GPIO0_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO0_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[49]">GPIO1_0_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[53]">GPIO1_10_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_10_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[54]">GPIO1_11_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_11_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[55]">GPIO1_12_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_12_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[56]">GPIO1_13_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_13_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[57]">GPIO1_14_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_14_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[58]">GPIO1_15_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_15_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4a]">GPIO1_1_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4b]">GPIO1_2_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4c]">GPIO1_3_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4d]">GPIO1_4_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_4_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4e]">GPIO1_5_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[4f]">GPIO1_6_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_6_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[50]">GPIO1_7_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_7_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[51]">GPIO1_8_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_8_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[52]">GPIO1_9_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_9_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[36]">GPIO1_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO1_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[59]">GPIO2_0_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[63]">GPIO2_10_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_10_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[64]">GPIO2_11_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_11_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[65]">GPIO2_12_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_12_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[66]">GPIO2_13_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_13_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[67]">GPIO2_14_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_14_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[68]">GPIO2_15_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_15_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5a]">GPIO2_1_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5b]">GPIO2_2_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5c]">GPIO2_3_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5d]">GPIO2_4_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_4_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5e]">GPIO2_5_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5f]">GPIO2_6_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_6_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[60]">GPIO2_7_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_7_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[61]">GPIO2_8_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_8_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[62]">GPIO2_9_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_9_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[37]">GPIO2_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO2_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[69]">GPIO3_0_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO3_0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6a]">GPIO3_1_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO3_1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6b]">GPIO3_2_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO3_2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6c]">GPIO3_3_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO3_3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[38]">GPIO3_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.GPIO3_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_fvp_sse300_mps3.o(.text.HardFault_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2e]">I2S_Handler</a> from startup_fvp_sse300_mps3.o(.text.I2S_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[15]">MGMT_PPU_Handler</a> from startup_fvp_sse300_mps3.o(.text.MGMT_PPU_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[11]">MPC_Handler</a> from startup_fvp_sse300_mps3.o(.text.MPC_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[13]">MSC_Handler</a> from startup_fvp_sse300_mps3.o(.text.MSC_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_fvp_sse300_mps3.o(.text.MemManage_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_fvp_sse300_mps3.o(.text.NMI_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[c]">NONSEC_WATCHDOG_Handler</a> from startup_fvp_sse300_mps3.o(.text.NONSEC_WATCHDOG_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[b]">NONSEC_WATCHDOG_RESET_Handler</a> from startup_fvp_sse300_mps3.o(.text.NONSEC_WATCHDOG_RESET_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[12]">PPC_Handler</a> from startup_fvp_sse300_mps3.o(.text.PPC_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_fvp_sse300_mps3.o(.text.PendSV_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_fvp_sse300_mps3.o(.text.Reset_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[d]">SLOWCLK_Timer_Handler</a> from startup_fvp_sse300_mps3.o(.text.SLOWCLK_Timer_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[31]">SPI_ADC_Handler</a> from startup_fvp_sse300_mps3.o(.text.SPI_ADC_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[32]">SPI_SHIELD0_Handler</a> from startup_fvp_sse300_mps3.o(.text.SPI_SHIELD0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[33]">SPI_SHIELD1_Handler</a> from startup_fvp_sse300_mps3.o(.text.SPI_SHIELD1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_fvp_sse300_mps3.o(.text.SVC_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[16]">SYS_PPU_Handler</a> from startup_fvp_sse300_mps3.o(.text.SYS_PPU_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_fvp_sse300_mps3.o(.text.SecureFault_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_fvp_sse300_mps3.o(.text.SysTick_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1c]">System_Timestamp_Counter_Handler</a> from startup_fvp_sse300_mps3.o(.text.System_Timestamp_Counter_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[e]">TIMER0_Handler</a> from startup_fvp_sse300_mps3.o(.text.TIMER0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[f]">TIMER1_Handler</a> from startup_fvp_sse300_mps3.o(.text.TIMER1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[10]">TIMER2_Handler</a> from startup_fvp_sse300_mps3.o(.text.TIMER2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[19]">TIMER3_Handler</a> from startup_fvp_sse300_mps3.o(.text.TIMER3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2f]">TOUCH_SCREEN_Handler</a> from startup_fvp_sse300_mps3.o(.text.TOUCH_SCREEN_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[27]">UART0_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART0_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[28]">UART1_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART1_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[29]">UART2_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART2_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2a]">UART3_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART3_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2b]">UART4_Combined_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART4_Combined_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6f]">UART5_Handler</a> from startup_fvp_sse300_mps3.o(.text.UART5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[2c]">UARTOVF_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTOVF_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1d]">UARTRX0_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1f]">UARTRX1_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[21]">UARTRX2_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[23]">UARTRX3_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[25]">UARTRX4_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX4_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6d]">UARTRX5_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTRX5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1e]">UARTTX0_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX0_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[20]">UARTTX1_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX1_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[22]">UARTTX2_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX2_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[24]">UARTTX3_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX3_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[26]">UARTTX4_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX4_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[6e]">UARTTX5_Handler</a> from startup_fvp_sse300_mps3.o(.text.UARTTX5_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[30]">USB_Handler</a> from startup_fvp_sse300_mps3.o(.text.USB_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_fvp_sse300_mps3.o(.text.UsageFault_Handler) referenced from startup_fvp_sse300_mps3.o(RESET)
 <LI><a href="#[1af]">int flexbuffers::KeyCompare&lang;unsigned char&rang;(void const*, void const*)</a> from detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIhEEiPKvS2_) referenced 5 times from detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
 <LI><a href="#[1b1]">int flexbuffers::KeyCompare&lang;unsigned int&rang;(void const*, void const*)</a> from detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIjEEiPKvS2_) referenced from detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
 <LI><a href="#[1b0]">int flexbuffers::KeyCompare&lang;unsigned short&rang;(void const*, void const*)</a> from detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareItEEiPKvS2_) referenced from detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
 <LI><a href="#[1b2]">int flexbuffers::KeyCompare&lang;unsigned long long&rang;(void const*, void const*)</a> from detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIyEEiPKvS2_) referenced from detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
 <LI><a href="#[85]">tflite::InitReduce(TfLiteContext*, char const*, unsigned int)</a> from reduce.o(.text._ZN6tflite10InitReduceEP13TfLiteContextPKcj) referenced 2 times from reduce.o(.text._ZN6tflite12Register_SUMEv)
 <LI><a href="#[85]">tflite::InitReduce(TfLiteContext*, char const*, unsigned int)</a> from reduce.o(.text._ZN6tflite10InitReduceEP13TfLiteContextPKcj) referenced 2 times from reduce.o(.text._ZN6tflite13Register_MEANEv)
 <LI><a href="#[85]">tflite::InitReduce(TfLiteContext*, char const*, unsigned int)</a> from reduce.o(.text._ZN6tflite10InitReduceEP13TfLiteContextPKcj) referenced 2 times from reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
 <LI><a href="#[89]">tflite::LogicalAnd(bool, bool)</a> from logical_common.o(.text._ZN6tflite10LogicalAndEbb) referenced 2 times from logical.o(.text._ZN6tflite12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[1bf]">tflite::MicroGraph::NumSubgraphs()</a> from micro_graph.o(.text._ZN6tflite10MicroGraph12NumSubgraphsEv) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b8]">tflite::MicroGraph::FreeSubgraphs()</a> from micro_graph.o(.text._ZN6tflite10MicroGraph13FreeSubgraphsEv) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b6]">tflite::MicroGraph::InitSubgraphs()</a> from micro_graph.o(.text._ZN6tflite10MicroGraph13InitSubgraphsEv) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b9]">tflite::MicroGraph::InvokeSubgraph(int)</a> from micro_graph.o(.text._ZN6tflite10MicroGraph14InvokeSubgraphEi) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1bc]">tflite::MicroGraph::GetSubgraphInput(int, int)</a> from micro_graph.o(.text._ZN6tflite10MicroGraph16GetSubgraphInputEii) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b7]">tflite::MicroGraph::PrepareSubgraphs()</a> from micro_graph.o(.text._ZN6tflite10MicroGraph16PrepareSubgraphsEv) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1be]">tflite::MicroGraph::GetSubgraphOutput(int, int)</a> from micro_graph.o(.text._ZN6tflite10MicroGraph17GetSubgraphOutputEii) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1bb]">tflite::MicroGraph::NumSubgraphInputs(int)</a> from micro_graph.o(.text._ZN6tflite10MicroGraph17NumSubgraphInputsEi) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1bd]">tflite::MicroGraph::NumSubgraphOutputs(int)</a> from micro_graph.o(.text._ZN6tflite10MicroGraph18NumSubgraphOutputsEi) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1ba]">tflite::MicroGraph::ResetVariableTensors()</a> from micro_graph.o(.text._ZN6tflite10MicroGraph20ResetVariableTensorsEv) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b5]">tflite::MicroGraph::~MicroGraph__deallocating()</a> from micro_graph.o(.text._ZN6tflite10MicroGraphD0Ev) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[1b4]">tflite::MicroGraph::~MicroGraph__sub_object()</a> from micro_graph.o(.text._ZN6tflite10MicroGraphD2Ev) referenced from micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
 <LI><a href="#[80]">tflite::MulPrepare(TfLiteContext*, TfLiteNode*)</a> from mul_common.o(.text._ZN6tflite10MulPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from mul.o(.text._ZN6tflite12Register_MULEv)
 <LI><a href="#[1d4]">tflite::OpResolver::~OpResolver__sub_object()</a> from all_ops_resolver.o(.text._ZN6tflite10OpResolverD2Ev) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[b2]">tflite::ParseEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b6]">tflite::ParseFloor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseFloorEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d2]">tflite::ParsePadV2(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParsePadV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d3]">tflite::ParsePrelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParsePreluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d7]">tflite::ParseRelu6(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseRelu6EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[db]">tflite::ParseRound(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseRoundEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[dc]">tflite::ParseRsqrt(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseRsqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[de]">tflite::ParseShape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e0]">tflite::ParseSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e4]">tflite::ParseSplit(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f2]">tflite::ParseWhile(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseWhileEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[75]">tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)</a> from add.o(.text._ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode) referenced 2 times from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[13b]">tflite::PrepareMax(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite10PrepareMaxEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
 <LI><a href="#[129]">tflite::SelectEval(TfLiteContext*, TfLiteNode*)</a> from select.o(.text._ZN6tflite10SelectEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
 <LI><a href="#[127]">tflite::SelectInit(TfLiteContext*, char const*, unsigned int)</a> from select.o(.text._ZN6tflite10SelectInitEP13TfLiteContextPKcj) referenced 2 times from select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
 <LI><a href="#[83]">tflite::SubPrepare(TfLiteContext*, TfLiteNode*)</a> from sub_common.o(.text._ZN6tflite10SubPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from sub.o(.text._ZN6tflite12Register_SUBEv)
 <LI><a href="#[9f]">tflite::ParseArgMax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a0]">tflite::ParseArgMin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[aa]">tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ac]">tflite::ParseCumsum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseCumsumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ba]">tflite::ParseGather(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseGatherEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e5]">tflite::ParseSplitV(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseSplitVEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e7]">tflite::ParseSquare(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseSquareEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f0]">tflite::ParseUnpack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[9a]">tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*)</a> from svdf_common.o(.text._ZN6tflite11PrepareSvdfEP13TfLiteContextP10TfLiteNode) referenced 2 times from svdf.o(.text._ZN6tflite13Register_SVDFEv)
 <LI><a href="#[97]">tflite::ReluPrepare(TfLiteContext*, TfLiteNode*)</a> from activations_common.o(.text._ZN6tflite11ReluPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from activations.o(.text._ZN6tflite13Register_RELUEv)
 <LI><a href="#[1ca]">tflite::MicroContext::GetEvalTensor(int)</a> from micro_context.o(.text._ZN6tflite12MicroContext13GetEvalTensorEi) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c4]">tflite::MicroContext::GetScratchBuffer(int)</a> from micro_context.o(.text._ZN6tflite12MicroContext16GetScratchBufferEi) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c6]">tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)</a> from micro_context.o(.text._ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c2]">tflite::MicroContext::AllocatePersistentBuffer(unsigned int)</a> from micro_context.o(.text._ZN6tflite12MicroContext24AllocatePersistentBufferEj) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c7]">tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)</a> from micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c5]">tflite::MicroContext::AllocateTempTfLiteTensor(int)</a> from micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c9]">tflite::MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_context.o(.text._ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c3]">tflite::MicroContext::RequestScratchBufferInArena(unsigned int, int*)</a> from micro_context.o(.text._ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c8]">tflite::MicroContext::AllocateTempIntermediateTensor(TfLiteNode const*, int)</a> from micro_context.o(.text._ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c1]">tflite::MicroContext::~MicroContext__deallocating()</a> from micro_context.o(.text._ZN6tflite12MicroContextD0Ev) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[1c0]">tflite::MicroContext::~MicroContext__sub_object()</a> from micro_context.o(.text._ZN6tflite12MicroContextD2Ev) referenced from micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
 <LI><a href="#[bc]">tflite::ParseGreater(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseGreaterEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c9]">tflite::ParseMaximum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseMaximumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[cb]">tflite::ParseMinimum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseMinimumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ca]">tflite::ParseReducer(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d8]">tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e1]">tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e9]">tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseSqueezeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f7]">tflite::PreluPrepare(TfLiteContext*, TfLiteNode*)</a> from prelu_common.o(.text._ZN6tflite12PreluPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from prelu.o(.text._ZN6tflite14Register_PRELUEv)
 <LI><a href="#[fa]">tflite::Relu6Prepare(TfLiteContext*, TfLiteNode*)</a> from activations_common.o(.text._ZN6tflite12Relu6PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from activations.o(.text._ZN6tflite14Register_RELU6Ev)
 <LI><a href="#[7b]">tflite::(anonymous namespace)::EluPrepare(TfLiteContext*, TfLiteNode*)</a> from elu.o(.text._ZN6tflite12_GLOBAL__N_110EluPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from elu.o(.text._ZN6tflite12Register_ELUEv)
 <LI><a href="#[146]">tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[158]">tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
 <LI><a href="#[113]">tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[118]">tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)</a> from logistic.o(.text._ZN6tflite12_GLOBAL__N_112LogisticEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
 <LI><a href="#[116]">tflite::(anonymous namespace)::LogisticInit(TfLiteContext*, char const*, unsigned int)</a> from logistic.o(.text._ZN6tflite12_GLOBAL__N_112LogisticInitEP13TfLiteContextPKcj) referenced 2 times from logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
 <LI><a href="#[131]">tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)</a> from hard_swish.o(.text._ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
 <LI><a href="#[12f]">tflite::(anonymous namespace)::HardSwishInit(TfLiteContext*, char const*, unsigned int)</a> from hard_swish.o(.text._ZN6tflite12_GLOBAL__N_113HardSwishInitEP13TfLiteContextPKcj) referenced 2 times from hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
 <LI><a href="#[137]">tflite::(anonymous namespace)::LogicalOrEval(TfLiteContext*, TfLiteNode*)</a> from logical.o(.text._ZN6tflite12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from logical.o(.text._ZN6tflite19Register_LOGICAL_OREv)
 <LI><a href="#[157]">tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
 <LI><a href="#[144]">tflite::(anonymous namespace)::LogicalAndEval(TfLiteContext*, TfLiteNode*)</a> from logical.o(.text._ZN6tflite12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from logical.o(.text._ZN6tflite20Register_LOGICAL_ANDEv)
 <LI><a href="#[149]">tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)</a> from broadcast_to.o(.text._ZN6tflite12_GLOBAL__N_115BroadcastToEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from broadcast_to.o(.text._ZN6tflite21Register_BROADCAST_TOEv)
 <LI><a href="#[14d]">tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)</a> from broadcast_args.o(.text._ZN6tflite12_GLOBAL__N_117BroadcastArgsEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from broadcast_args.o(.text._ZN6tflite23Register_BROADCAST_ARGSEv)
 <LI><a href="#[8d]">tflite::(anonymous namespace)::SquaredDifference(signed char, signed char, tflite::ArithmeticParams const&)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceEaaRKNS_16ArithmeticParamsE) referenced 2 times from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[8c]">float tflite::(anonymous namespace)::SquaredDifference&lang;float&rang;(float, float)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceIfEET_S2_S2_) referenced 2 times from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[8e]">int tflite::(anonymous namespace)::SquaredDifference&lang;int&rang;(int, int)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceIiEET_S2_S2_) referenced 2 times from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[148]">tflite::(anonymous namespace)::BroadcastToPrepare(TfLiteContext*, TfLiteNode*)</a> from broadcast_to.o(.text._ZN6tflite12_GLOBAL__N_118BroadcastToPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from broadcast_to.o(.text._ZN6tflite21Register_BROADCAST_TOEv)
 <LI><a href="#[14c]">tflite::(anonymous namespace)::BroadcastArgsPrepare(TfLiteContext*, TfLiteNode*)</a> from broadcast_args.o(.text._ZN6tflite12_GLOBAL__N_120BroadcastArgsPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from broadcast_args.o(.text._ZN6tflite23Register_BROADCAST_ARGSEv)
 <LI><a href="#[16b]">tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
 <LI><a href="#[169]">tflite::(anonymous namespace)::SquaredDifferenceInit(TfLiteContext*, char const*, unsigned int)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceInitEP13TfLiteContextPKcj) referenced 2 times from squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
 <LI><a href="#[16a]">tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)</a> from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_124SquaredDifferencePrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
 <LI><a href="#[1cc]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[1cb]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[1ce]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[73]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from if.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from if.o(.text._ZN6tflite11Register_IFEv)
 <LI><a href="#[79]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from div.o(.text._ZN6tflite12Register_DIVEv)
 <LI><a href="#[7e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from exp.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from exp.o(.text._ZN6tflite12Register_EXPEv)
 <LI><a href="#[92]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from cast.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from cast.o(.text._ZN6tflite13Register_CASTEv)
 <LI><a href="#[94]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from fill.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from fill.o(.text._ZN6tflite13Register_FILLEv)
 <LI><a href="#[f5]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from add_n.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from add_n.o(.text._ZN6tflite14Register_ADD_NEv)
 <LI><a href="#[fd]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from shape.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from shape.o(.text._ZN6tflite14Register_SHAPEEv)
 <LI><a href="#[ff]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from slice.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from slice.o(.text._ZN6tflite14Register_SLICEEv)
 <LI><a href="#[102]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from while.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from while.o(.text._ZN6tflite14Register_WHILEEv)
 <LI><a href="#[104]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from cumsum.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from cumsum.o(.text._ZN6tflite15Register_CUMSUMEv)
 <LI><a href="#[106]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from gather.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from gather.o(.text._ZN6tflite15Register_GATHEREv)
 <LI><a href="#[110]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[115]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from squeeze.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from squeeze.o(.text._ZN6tflite16Register_SQUEEZEEv)
 <LI><a href="#[11e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from call_once.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
 <LI><a href="#[121]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from floor_div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
 <LI><a href="#[124]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
 <LI><a href="#[126]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from gather_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from gather_nd.o(.text._ZN6tflite18Register_GATHER_NDEv)
 <LI><a href="#[12b]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from transpose.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
 <LI><a href="#[13a]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
 <LI><a href="#[13f]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from var_handle.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
 <LI><a href="#[141]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from zeros_like.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from zeros_like.o(.text._ZN6tflite19Register_ZEROS_LIKEEv)
 <LI><a href="#[143]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from expand_dims.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from expand_dims.o(.text._ZN6tflite20Register_EXPAND_DIMSEv)
 <LI><a href="#[14b]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from read_variable.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from read_variable.o(.text._ZN6tflite22Register_READ_VARIABLEEv)
 <LI><a href="#[14f]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from depth_to_space.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from depth_to_space.o(.text._ZN6tflite23Register_DEPTH_TO_SPACEEv)
 <LI><a href="#[151]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from space_to_depth.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from space_to_depth.o(.text._ZN6tflite23Register_SPACE_TO_DEPTHEv)
 <LI><a href="#[154]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
 <LI><a href="#[156]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from assign_variable.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from assign_variable.o(.text._ZN6tflite24Register_ASSIGN_VARIABLEEv)
 <LI><a href="#[15e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from fully_connected.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
 <LI><a href="#[160]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from resize_bilinear.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from resize_bilinear.o(.text._ZN6tflite24Register_RESIZE_BILINEAREv)
 <LI><a href="#[162]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from batch_to_space_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from batch_to_space_nd.o(.text._ZN6tflite26Register_BATCH_TO_SPACE_NDEv)
 <LI><a href="#[165]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[168]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
 <LI><a href="#[16e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
 <LI><a href="#[71]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from if.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from if.o(.text._ZN6tflite11Register_IFEv)
 <LI><a href="#[77]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from div.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from div.o(.text._ZN6tflite12Register_DIVEv)
 <LI><a href="#[99]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from svdf.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from svdf.o(.text._ZN6tflite13Register_SVDFEv)
 <LI><a href="#[100]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from while.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from while.o(.text._ZN6tflite14Register_WHILEEv)
 <LI><a href="#[10e]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[111]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[119]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from quantize.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[11c]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from call_once.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
 <LI><a href="#[11f]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from floor_div.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
 <LI><a href="#[122]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
 <LI><a href="#[138]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
 <LI><a href="#[13d]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from var_handle.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
 <LI><a href="#[145]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[152]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
 <LI><a href="#[145]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
 <LI><a href="#[15c]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from fully_connected.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
 <LI><a href="#[163]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[166]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
 <LI><a href="#[16c]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
 <LI><a href="#[133]">tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)</a> from l2_pool_2d.o(.text._ZN6tflite12_GLOBAL__N_16L2EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from l2_pool_2d.o(.text._ZN6tflite19Register_L2_POOL_2DEv)
 <LI><a href="#[7c]">tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)</a> from elu.o(.text._ZN6tflite12_GLOBAL__N_17EluEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elu.o(.text._ZN6tflite12Register_ELUEv)
 <LI><a href="#[7a]">tflite::(anonymous namespace)::EluInit(TfLiteContext*, char const*, unsigned int)</a> from elu.o(.text._ZN6tflite12_GLOBAL__N_17EluInitEP13TfLiteContextPKcj) referenced 2 times from elu.o(.text._ZN6tflite12Register_ELUEv)
 <LI><a href="#[147]">tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[72]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from if.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from if.o(.text._ZN6tflite11Register_IFEv)
 <LI><a href="#[78]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from div.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from div.o(.text._ZN6tflite12Register_DIVEv)
 <LI><a href="#[7d]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from exp.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from exp.o(.text._ZN6tflite12Register_EXPEv)
 <LI><a href="#[91]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from cast.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from cast.o(.text._ZN6tflite13Register_CASTEv)
 <LI><a href="#[93]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from fill.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from fill.o(.text._ZN6tflite13Register_FILLEv)
 <LI><a href="#[f4]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from add_n.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from add_n.o(.text._ZN6tflite14Register_ADD_NEv)
 <LI><a href="#[fc]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from shape.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from shape.o(.text._ZN6tflite14Register_SHAPEEv)
 <LI><a href="#[fe]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from slice.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from slice.o(.text._ZN6tflite14Register_SLICEEv)
 <LI><a href="#[101]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from while.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from while.o(.text._ZN6tflite14Register_WHILEEv)
 <LI><a href="#[103]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from cumsum.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from cumsum.o(.text._ZN6tflite15Register_CUMSUMEv)
 <LI><a href="#[105]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from gather.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from gather.o(.text._ZN6tflite15Register_GATHEREv)
 <LI><a href="#[10f]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[112]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[114]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from squeeze.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from squeeze.o(.text._ZN6tflite16Register_SQUEEZEEv)
 <LI><a href="#[11d]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from call_once.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
 <LI><a href="#[120]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from floor_div.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
 <LI><a href="#[123]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from floor_mod.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
 <LI><a href="#[125]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from gather_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from gather_nd.o(.text._ZN6tflite18Register_GATHER_NDEv)
 <LI><a href="#[12a]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from transpose.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
 <LI><a href="#[139]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
 <LI><a href="#[13e]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from var_handle.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
 <LI><a href="#[140]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from zeros_like.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from zeros_like.o(.text._ZN6tflite19Register_ZEROS_LIKEEv)
 <LI><a href="#[142]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from expand_dims.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from expand_dims.o(.text._ZN6tflite20Register_EXPAND_DIMSEv)
 <LI><a href="#[14a]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from read_variable.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from read_variable.o(.text._ZN6tflite22Register_READ_VARIABLEEv)
 <LI><a href="#[14e]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from depth_to_space.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from depth_to_space.o(.text._ZN6tflite23Register_DEPTH_TO_SPACEEv)
 <LI><a href="#[150]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from space_to_depth.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from space_to_depth.o(.text._ZN6tflite23Register_SPACE_TO_DEPTHEv)
 <LI><a href="#[153]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
 <LI><a href="#[155]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from assign_variable.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from assign_variable.o(.text._ZN6tflite24Register_ASSIGN_VARIABLEEv)
 <LI><a href="#[15d]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from fully_connected.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
 <LI><a href="#[15f]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from resize_bilinear.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from resize_bilinear.o(.text._ZN6tflite24Register_RESIZE_BILINEAREv)
 <LI><a href="#[161]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from batch_to_space_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from batch_to_space_nd.o(.text._ZN6tflite26Register_BATCH_TO_SPACE_NDEv)
 <LI><a href="#[164]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[167]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
 <LI><a href="#[16d]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
 <LI><a href="#[9b]">tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)</a> from svdf.o(.text._ZN6tflite12_GLOBAL__N_18EvalSvdfEP13TfLiteContextP10TfLiteNode) referenced 2 times from svdf.o(.text._ZN6tflite13Register_SVDFEv)
 <LI><a href="#[98]">tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)</a> from activations.o(.text._ZN6tflite12_GLOBAL__N_18ReluEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from activations.o(.text._ZN6tflite13Register_RELUEv)
 <LI><a href="#[96]">tflite::(anonymous namespace)::ReluInit(TfLiteContext*, char const*, unsigned int)</a> from activations.o(.text._ZN6tflite12_GLOBAL__N_18ReluInitEP13TfLiteContextPKcj) referenced 2 times from activations.o(.text._ZN6tflite13Register_RELUEv)
 <LI><a href="#[132]">tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)</a> from l2_pool_2d.o(.text._ZN6tflite12_GLOBAL__N_19L2PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from l2_pool_2d.o(.text._ZN6tflite19Register_L2_POOL_2DEv)
 <LI><a href="#[fb]">tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)</a> from activations.o(.text._ZN6tflite12_GLOBAL__N_19Relu6EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from activations.o(.text._ZN6tflite14Register_RELU6Ev)
 <LI><a href="#[f9]">tflite::(anonymous namespace)::Relu6Init(TfLiteContext*, char const*, unsigned int)</a> from activations.o(.text._ZN6tflite12_GLOBAL__N_19Relu6InitEP13TfLiteContextPKcj) referenced 2 times from activations.o(.text._ZN6tflite14Register_RELU6Ev)
 <LI><a href="#[1e9]">tflite::ErrorReporter::~ErrorReporter__sub_object()</a> from micro_error_reporter.o(.text._ZN6tflite13ErrorReporterD2Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[136]">tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)</a> from leaky_relu.o(.text._ZN6tflite13LeakyReluEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
 <LI><a href="#[134]">tflite::LeakyReluInit(TfLiteContext*, char const*, unsigned int)</a> from leaky_relu.o(.text._ZN6tflite13LeakyReluInitEP13TfLiteContextPKcj) referenced 2 times from leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
 <LI><a href="#[a6]">tflite::ParseCallOnce(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseCallOnceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b7]">tflite::ParseFloorDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseFloorDivEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b8]">tflite::ParseFloorMod(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseFloorModEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[bb]">tflite::ParseGatherNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseGatherNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c8]">tflite::ParseLogistic(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseLogisticEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[cf]">tflite::ParseNotEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseNotEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d4]">tflite::ParseQuantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[dd]">tflite::ParseSelectV2(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseSelectV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[128]">tflite::SelectPrepare(TfLiteContext*, TfLiteNode*)</a> from select.o(.text._ZN6tflite13SelectPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
 <LI><a href="#[8f]">float tflite::reference_ops::FloorDiv&lang;float&rang;(float, float)</a> from floor_div.o(.text._ZN6tflite13reference_ops8FloorDivIfEET_S2_S2_) referenced 2 times from floor_div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[90]">float tflite::reference_ops::FloorMod&lang;float&rang;(float, float)</a> from floor_mod.o(.text._ZN6tflite13reference_ops8FloorModIfEET_S2_S2_) referenced 2 times from floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[1d5]">tflite::AllOpsResolver::~AllOpsResolver__deallocating()</a> from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverD0Ev) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[12e]">tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)</a> from dequantize.o(.text._ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[12c]">tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)</a> from dequantize.o(.text._ZN6tflite14DequantizeInitEP13TfLiteContextPKcj) referenced 2 times from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[1e4]">tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1de]">tflite::MicroAllocator::IsAllTempDeallocated()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1dd]">tflite::MicroAllocator::ResetTempAllocations()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e7]">tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1df]">tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1db]">tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e3]">tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1dc]">tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e2]">tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e8]">tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1da]">tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e6]">tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e5]">tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e1]">tflite::MicroAllocator::~MicroAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[1e0]">tflite::MicroAllocator::~MicroAllocator__sub_object()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[be]">tflite::ParseHardSwish(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseHardSwishEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c1]">tflite::ParseLeakyRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseLeakyReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c3]">tflite::ParseLessEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseLessEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c7]">tflite::ParseLogicalOr(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseLogicalOrEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[cc]">tflite::ParseMirrorPad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseMirrorPadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ee]">tflite::ParseTranspose(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseTransposeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f1]">tflite::ParseVarHandle(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseVarHandleEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f3]">tflite::ParseZerosLike(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseZerosLikeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[117]">tflite::LogisticPrepare(TfLiteContext*, TfLiteNode*)</a> from logistic_common.o(.text._ZN6tflite15LogisticPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
 <LI><a href="#[af]">tflite::ParseDequantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b4]">tflite::ParseExpandDims(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite15ParseExpandDimsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c5]">tflite::ParseLogicalAnd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite15ParseLogicalAndEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c6]">tflite::ParseLogicalNot(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite15ParseLogicalNotEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[130]">tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*)</a> from hard_swish_common.o(.text._ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
 <LI><a href="#[135]">tflite::LeakyReluPrepare(TfLiteContext*, TfLiteNode*)</a> from leaky_relu_common.o(.text._ZN6tflite16LeakyReluPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
 <LI><a href="#[1b3]">tflite::MicroInterpreter::~MicroInterpreter()</a> from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev) referenced 2 times from main.o(.text.main)
 <LI><a href="#[a5]">tflite::ParseBroadcastTo(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite16ParseBroadcastToEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[86]">tflite::PrepareMeanOrSum(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite12Register_SUMEv)
 <LI><a href="#[86]">tflite::PrepareMeanOrSum(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite13Register_MEANEv)
 <LI><a href="#[12d]">tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)</a> from dequantize_common.o(.text._ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[ad]">tflite::ParseDepthToSpace(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite17ParseDepthToSpaceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[bd]">tflite::ParseGreaterEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite17ParseGreaterEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d5]">tflite::ParseReadVariable(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite17ParseReadVariableEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e3]">tflite::ParseSpaceToDepth(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite17ParseSpaceToDepthEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ea]">tflite::ParseStridedSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[15b]">tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)</a> from circular_buffer.o(.text._ZN6tflite18CircularBufferEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
 <LI><a href="#[159]">tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int)</a> from circular_buffer.o(.text._ZN6tflite18CircularBufferInitEP13TfLiteContextPKcj) referenced 2 times from circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
 <LI><a href="#[1eb]">tflite::MicroErrorReporter::Report(char const*, std::__va_list)</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[1ea]">tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[a4]">tflite::ParseBroadcastArgs(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite18ParseBroadcastArgsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a9]">tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ef]">tflite::ParseTransposeConv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite18ParseTransposeConvEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[1f1]">tflite::GreedyMemoryPlanner::GetBufferCount()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1f4]">tflite::GreedyMemoryPlanner::PrintMemoryPlan()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1f2]">tflite::GreedyMemoryPlanner::GetOffsetForBuffer(tflite::ErrorReporter*, int, int*)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1f0]">tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1f3]">tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1ee]">tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1ef]">tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1ed]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1ec]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[a1]">tflite::ParseAssignVariable(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite19ParseAssignVariableEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a3]">tflite::ParseBatchToSpaceNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite19ParseBatchToSpaceNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b9]">tflite::ParseFullyConnected(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d9]">tflite::ParseResizeBilinear(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite19ParseResizeBilinearEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e2]">tflite::ParseSpaceToBatchNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite19ParseSpaceToBatchNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[1cd]">tflite::BuiltinDataAllocator::~BuiltinDataAllocator__sub_object()</a> from micro_allocator.o(.text._ZN6tflite20BuiltinDataAllocatorD2Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[ae]">tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c0]">tflite::ParseL2Normalization(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[15a]">tflite::CircularBufferPrepare(TfLiteContext*, TfLiteNode*)</a> from circular_buffer_common.o(.text._ZN6tflite21CircularBufferPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
 <LI><a href="#[11b]">tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)</a> from quantize_common.o(.text._ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode) referenced 2 times from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[10d]">tflite::MicroContextGetTensor(TfLiteContext const*, int)</a> from kernel_runner.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
 <LI><a href="#[8a]">tflite::reference_integer_ops::CheckArithmeticParams(tflite::ArithmeticParams const&)</a> from add.o(.text._ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE) referenced 2 times from add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_)
 <LI><a href="#[8a]">tflite::reference_integer_ops::CheckArithmeticParams(tflite::ArithmeticParams const&)</a> from add.o(.text._ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE) referenced 2 times from squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[8b]">tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)</a> from add.o(.text._ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE) referenced 2 times from add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_)
 <LI><a href="#[e8]">tflite::ParseSquaredDifference(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite22ParseSquaredDifferenceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[11a]">tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)</a> from quantize_common.o(.text._ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode) referenced 2 times from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[10c]">tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</a> from kernel_runner.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
 <LI><a href="#[10b]">tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</a> from micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
 <LI><a href="#[da]">tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[1f7]">tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1fc]">tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1f8]">tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1f9]">tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1fa]">tflite::SingleArenaBufferAllocator::ResetTempAllocations()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1fb]">tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[202]">tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1fd]">tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1ff]">tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1f6]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1f5]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10a]">tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</a> from kernel_runner.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
 <LI><a href="#[109]">tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</a> from kernel_runner.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
 <LI><a href="#[107]">tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</a> from kernel_runner.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
 <LI><a href="#[108]">tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</a> from kernel_runner.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
 <LI><a href="#[182]">tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)</a> from tanh.o(.text._ZN6tflite3ops5micro11activations12_GLOBAL__N_111TanhPrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
 <LI><a href="#[181]">tflite::ops::micro::activations::(anonymous namespace)::TanhInit(TfLiteContext*, char const*, unsigned int)</a> from tanh.o(.text._ZN6tflite3ops5micro11activations12_GLOBAL__N_18TanhInitEP13TfLiteContextPKcj) referenced 2 times from tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
 <LI><a href="#[183]">tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)</a> from tanh.o(.text._ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
 <LI><a href="#[196]">tflite::ops::micro::arg_min_max::ArgMaxEval(TfLiteContext*, TfLiteNode*)</a> from arg_min_max.o(.text._ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MAXEv)
 <LI><a href="#[197]">tflite::ops::micro::arg_min_max::ArgMinEval(TfLiteContext*, TfLiteNode*)</a> from arg_min_max.o(.text._ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MINEv)
 <LI><a href="#[198]">tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
 <LI><a href="#[19f]">tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
 <LI><a href="#[1a0]">tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
 <LI><a href="#[1a6]">tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
 <LI><a href="#[17e]">tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
 <LI><a href="#[184]">tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
 <LI><a href="#[17c]">tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
 <LI><a href="#[17d]">tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</a> from comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
 <LI><a href="#[18c]">tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro15Register_SQUAREEv)
 <LI><a href="#[1a1]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsLogicalSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro20Register_LOGICAL_NOTEv)
 <LI><a href="#[172]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_COSEv)
 <LI><a href="#[172]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_LOGEv)
 <LI><a href="#[172]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_SINEv)
 <LI><a href="#[172]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro13Register_SQRTEv)
 <LI><a href="#[172]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro15Register_SQUAREEv)
 <LI><a href="#[1a2]">tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro20Register_LOGICAL_NOTEv)
 <LI><a href="#[170]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_115PrepareAbsRsqrtIXadL_ZNS3_18IsAbsSupportedTypeE10TfLiteTypeEELi0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
 <LI><a href="#[188]">TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_115PrepareAbsRsqrtIXadL_ZNS3_20IsRsqrtSupportedTypeE10TfLiteTypeEELi1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
 <LI><a href="#[16f]">tflite::ops::micro::elementwise::(anonymous namespace)::ElementWiseAbsRsqrtInit(TfLiteContext*, char const*, unsigned int)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_123ElementWiseAbsRsqrtInitEP13TfLiteContextPKcj) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
 <LI><a href="#[16f]">tflite::ops::micro::elementwise::(anonymous namespace)::ElementWiseAbsRsqrtInit(TfLiteContext*, char const*, unsigned int)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_123ElementWiseAbsRsqrtInitEP13TfLiteContextPKcj) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
 <LI><a href="#[171]">tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
 <LI><a href="#[173]">tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_COSEv)
 <LI><a href="#[174]">tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_LOGEv)
 <LI><a href="#[179]">tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro12Register_SINEv)
 <LI><a href="#[180]">tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro13Register_SQRTEv)
 <LI><a href="#[189]">tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)</a> from elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
 <LI><a href="#[1a5]">tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)</a> from concatenation.o(.text._ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
 <LI><a href="#[1a3]">tflite::ops::micro::concatenation::Init(TfLiteContext*, char const*, unsigned int)</a> from concatenation.o(.text._ZN6tflite3ops5micro13concatenation4InitEP13TfLiteContextPKcj) referenced 2 times from concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
 <LI><a href="#[1a4]">tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*)</a> from concatenation.o(.text._ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
 <LI><a href="#[1a9]">tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)</a> from strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
 <LI><a href="#[1a7]">tflite::ops::micro::strided_slice::Init(TfLiteContext*, char const*, unsigned int)</a> from strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice4InitEP13TfLiteContextPKcj) referenced 2 times from strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
 <LI><a href="#[1a8]">tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*)</a> from strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
 <LI><a href="#[191]">signed char tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;signed char&rang;(signed char, signed char)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[18e]">float tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;float&rang;(float, float)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[18f]">int tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;int&rang;(int, int)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[190]">long long tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;long long&rang;(long long, long long)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[195]">signed char tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;signed char&rang;(signed char, signed char)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[192]">float tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;float&rang;(float, float)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[193]">int tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;int&rang;(int, int)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[194]">long long tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;long long&rang;(long long, long long)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[199]">TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MAXIMUMEv)
 <LI><a href="#[19a]">TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)</a> from maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode) referenced 2 times from maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MINIMUMEv)
 <LI><a href="#[1ae]">tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)</a> from resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv)
 <LI><a href="#[1ad]">tflite::ops::micro::resize_nearest_neighbor::Prepare(TfLiteContext*, TfLiteNode*)</a> from resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv)
 <LI><a href="#[175]">tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)</a> from neg.o(.text._ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from neg.o(.text._ZN6tflite3ops5micro12Register_NEGEv)
 <LI><a href="#[178]">tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
 <LI><a href="#[178]">tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
 <LI><a href="#[176]">tflite::ops::micro::pad::Init(TfLiteContext*, char const*, unsigned int)</a> from pad.o(.text._ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
 <LI><a href="#[176]">tflite::ops::micro::pad::Init(TfLiteContext*, char const*, unsigned int)</a> from pad.o(.text._ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
 <LI><a href="#[177]">tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
 <LI><a href="#[177]">tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
 <LI><a href="#[17b]">tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)</a> from ceil.o(.text._ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from ceil.o(.text._ZN6tflite3ops5micro13Register_CEILEv)
 <LI><a href="#[17a]">tflite::ops::micro::ceil::Prepare(TfLiteContext*, TfLiteNode*)</a> from ceil.o(.text._ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from ceil.o(.text._ZN6tflite3ops5micro13Register_CEILEv)
 <LI><a href="#[17f]">tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from pack.o(.text._ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from pack.o(.text._ZN6tflite3ops5micro13Register_PACKEv)
 <LI><a href="#[185]">tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)</a> from floor.o(.text._ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from floor.o(.text._ZN6tflite3ops5micro14Register_FLOOREv)
 <LI><a href="#[187]">tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)</a> from round.o(.text._ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from round.o(.text._ZN6tflite3ops5micro14Register_ROUNDEv)
 <LI><a href="#[186]">tflite::ops::micro::round::Prepare(TfLiteContext*, TfLiteNode*)</a> from round.o(.text._ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from round.o(.text._ZN6tflite3ops5micro14Register_ROUNDEv)
 <LI><a href="#[18b]">tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)</a> from split.o(.text._ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from split.o(.text._ZN6tflite3ops5micro14Register_SPLITEv)
 <LI><a href="#[18a]">tflite::ops::micro::split::Prepare(TfLiteContext*, TfLiteNode*)</a> from split.o(.text._ZN6tflite3ops5micro5split7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from split.o(.text._ZN6tflite3ops5micro14Register_SPLITEv)
 <LI><a href="#[1ac]">tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)</a> from l2norm.o(.text._ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
 <LI><a href="#[1aa]">tflite::ops::micro::l2norm::Init(TfLiteContext*, char const*, unsigned int)</a> from l2norm.o(.text._ZN6tflite3ops5micro6l2norm4InitEP13TfLiteContextPKcj) referenced 2 times from l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
 <LI><a href="#[1ab]">tflite::ops::micro::l2norm::Prepare(TfLiteContext*, TfLiteNode*)</a> from l2norm.o(.text._ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
 <LI><a href="#[18d]">tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from unpack.o(.text._ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from unpack.o(.text._ZN6tflite3ops5micro15Register_UNPACKEv)
 <LI><a href="#[19c]">tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)</a> from reshape.o(.text._ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from reshape.o(.text._ZN6tflite3ops5micro16Register_RESHAPEEv)
 <LI><a href="#[19b]">tflite::ops::micro::reshape::Prepare(TfLiteContext*, TfLiteNode*)</a> from reshape.o(.text._ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from reshape.o(.text._ZN6tflite3ops5micro16Register_RESHAPEEv)
 <LI><a href="#[19e]">tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)</a> from split_v.o(.text._ZN6tflite3ops5micro7split_v4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from split_v.o(.text._ZN6tflite3ops5micro16Register_SPLIT_VEv)
 <LI><a href="#[19d]">tflite::ops::micro::split_v::Prepare(TfLiteContext*, TfLiteNode*)</a> from split_v.o(.text._ZN6tflite3ops5micro7split_v7PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from split_v.o(.text._ZN6tflite3ops5micro16Register_SPLIT_VEv)
 <LI><a href="#[81]">tflite::Eval(TfLiteContext*, TfLiteNode*)</a> from mul.o(.text._ZN6tflite4EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from mul.o(.text._ZN6tflite12Register_MULEv)
 <LI><a href="#[76]">tflite::EvalAdd(TfLiteContext*, TfLiteNode*)</a> from add.o(.text._ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode) referenced 2 times from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[13c]">tflite::EvalMax(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite7EvalMaxEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
 <LI><a href="#[87]">tflite::EvalSum(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite7EvalSumEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite12Register_SUMEv)
 <LI><a href="#[74]">tflite::InitAdd(TfLiteContext*, char const*, unsigned int)</a> from add.o(.text._ZN6tflite7InitAddEP13TfLiteContextPKcj) referenced 2 times from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[7f]">tflite::MulInit(TfLiteContext*, char const*, unsigned int)</a> from mul_common.o(.text._ZN6tflite7MulInitEP13TfLiteContextPKcj) referenced 2 times from mul.o(.text._ZN6tflite12Register_MULEv)
 <LI><a href="#[bf]">tflite::ParseIf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite7ParseIfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[84]">tflite::SubEval(TfLiteContext*, TfLiteNode*)</a> from sub.o(.text._ZN6tflite7SubEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from sub.o(.text._ZN6tflite12Register_SUBEv)
 <LI><a href="#[82]">tflite::SubInit(TfLiteContext*, char const*, unsigned int)</a> from sub.o(.text._ZN6tflite7SubInitEP13TfLiteContextPKcj) referenced 2 times from sub.o(.text._ZN6tflite12Register_SUBEv)
 <LI><a href="#[95]">tflite::EvalMean(TfLiteContext*, TfLiteNode*)</a> from reduce.o(.text._ZN6tflite8EvalMeanEP13TfLiteContextP10TfLiteNode) referenced 2 times from reduce.o(.text._ZN6tflite13Register_MEANEv)
 <LI><a href="#[9c]">tflite::ParseAbs(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseAbsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[9d]">tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ab]">tflite::ParseCos(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseCosEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b0]">tflite::ParseDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseDivEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b1]">tflite::ParseElu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseEluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b3]">tflite::ParseExp(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseExpEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c4]">tflite::ParseLog(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseLogEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[cd]">tflite::ParseMul(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ce]">tflite::ParseNeg(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseNegEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d1]">tflite::ParsePad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[df]">tflite::ParseSin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseSinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[eb]">tflite::ParseSub(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[88]">tflite::LogicalOr(bool, bool)</a> from logical_common.o(.text._ZN6tflite9LogicalOrEbb) referenced 2 times from logical.o(.text._ZN6tflite12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode)
 <LI><a href="#[9e]">tflite::ParseAddN(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseAddNEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a7]">tflite::ParseCast(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseCastEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a8]">tflite::ParseCeil(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseCeilEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[b5]">tflite::ParseFill(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseFillEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[c2]">tflite::ParseLess(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseLessEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d0]">tflite::ParsePack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[a2]">tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 4 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[d6]">tflite::ParseRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[e6]">tflite::ParseSqrt(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseSqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ec]">tflite::ParseSvdf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[ed]">tflite::ParseTanh(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParseTanhEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
 <LI><a href="#[f8]">tflite::PreluEval(TfLiteContext*, TfLiteNode*)</a> from prelu.o(.text._ZN6tflite9PreluEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from prelu.o(.text._ZN6tflite14Register_PRELUEv)
 <LI><a href="#[f6]">tflite::PreluInit(TfLiteContext*, char const*, unsigned int)</a> from prelu.o(.text._ZN6tflite9PreluInitEP13TfLiteContextPKcj) referenced 2 times from prelu.o(.text._ZN6tflite14Register_PRELUEv)
 <LI><a href="#[1d1]">tflite::OpResolver::GetDelegates(int) const</a> from all_ops_resolver.o(.text._ZNK6tflite10OpResolver12GetDelegatesEi) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d2]">tflite::OpResolver::GetDelegateCreators() const</a> from all_ops_resolver.o(.text._ZNK6tflite10OpResolver19GetDelegateCreatorsEv) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d6]">tflite::OpResolver::MayContainUserDefinedOps() const</a> from all_ops_resolver.o(.text._ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d3]">tflite::OpResolver::GetOpaqueDelegateCreators() const</a> from all_ops_resolver.o(.text._ZNK6tflite10OpResolver25GetOpaqueDelegateCreatorsEv) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1cf]">tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const</a> from all_ops_resolver.o(.text._ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d0]">tflite::MicroOpResolver::FindOp(char const*, int) const</a> from all_ops_resolver.o(.text._ZNK6tflite15MicroOpResolver6FindOpEPKci) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d9]">tflite::MicroMutableOpResolver&lang;128u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</a> from all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d7]">tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(tflite::BuiltinOperator) const</a> from all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[1d8]">tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(char const*) const</a> from all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc) referenced from all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
 <LI><a href="#[201]">tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[203]">tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1fe]">tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[200]">tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[206]">non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[205]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[204]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[207]">non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[70]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[208]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[209]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[440]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[441]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[20c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[442]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[217]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[20d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[20f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[443]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[444]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[445]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[446]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[447]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[448]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[449]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[44a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[44b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[44c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[44d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[44e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[44f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[450]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[451]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[452]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[453]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[454]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[455]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[456]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[457]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[214]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[458]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[459]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[45a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[45b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[45c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[45d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[45e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[20a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[45f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[460]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[216]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[461]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[218]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[462]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[246]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[463]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[21d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[464]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>

<P><STRONG><a name="[221]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
</UL>

<P><STRONG><a name="[223]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddN(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, unsigned int, signed char const* const*, signed char*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Relu6Quantized(signed char, signed char, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Relu6Float(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Relu6Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluQuantized(tflite::ReluOpData const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, signed char const*, signed char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::GetOpDataParser(tflite::BuiltinOperator) const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseWhile(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseVarHandle(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseUnpack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseTransposeConv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSvdf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSub(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseStridedSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSplitV(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSplit(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSpaceToDepth(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseResizeBilinear(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseReducer(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseMul(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseMirrorPad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseLeakyRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseL2Normalization(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseIf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseGather(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseFullyConnected(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthToSpace(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseCumsum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseCast(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseCallOnce(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseArgMin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseArgMax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::ElementWiseAbsRsqrtInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;signed char&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;float&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::CumSum(tflite::ArithmeticParams const&, signed char const*, tflite::RuntimeShape const&, int, bool, bool, signed char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::CumSum&lang;float&rang;(float const*, tflite::RuntimeShape const&, int, bool, bool, float*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::NotEqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::NotEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::NotEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::EqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::EqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::EqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetMutableEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Softmax(tflite::SoftmaxParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MulPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MulInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::FullyConnected(tflite::FullyConnectedParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt16(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::DepthwiseConv(tflite::DepthwiseParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingDim(tflite::RuntimeShape const&, int, tflite::RuntimeShape const&, int)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Conv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddGeneralParamScale(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::CheckArithmeticParams(tflite::ArithmeticParams const&)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::InitAdd(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastArgs&lang;long long&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastArgs&lang;int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;signed char&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AveragePool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;int, int&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, int const*, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingExtendedShapeFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mul&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogisticPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool))
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Normalization(tflite::L2NormalizationParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Pool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DownScaleInt32ToInt16Multiplier(int, short*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::HardSwish&lang;signed char&rang;(tflite::HardSwishParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::TransposeConv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;int, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;signed char, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;signed char&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;float&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectInit(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;int&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinearInteger&lang;signed char&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinear&lang;float&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;short, int&rang;(short const*, int const*, int, short*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;signed char, int&rang;(signed char const*, int const*, int, signed char*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;float, float&rang;(float const*, int const*, int, float*, int const*, int, int const*, int, bool, int*, int*, float*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalTensorBytes(TfLiteEvalTensor const*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InvokeSubgraph(int)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[417]"></a>bsearch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsearchnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Map::operator[](char const*) const
</UL>

<P><STRONG><a name="[225]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddN(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, unsigned int, signed char const* const*, signed char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluQuantized(tflite::ReluOpData const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, signed char const*, signed char*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Map::operator[](char const*) const
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::CumSum(tflite::ArithmeticParams const&, signed char const*, tflite::RuntimeShape const&, int, bool, bool, signed char*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Requantize&lang;signed char, unsigned char&rang;(signed char const*, int, int, int, int, int, unsigned char*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Requantize&lang;unsigned char, signed char&rang;(unsigned char const*, int, int, int, int, int, signed char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mul&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::L2Normalization(int, int, int, signed char const*, signed char*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::HardSwish&lang;signed char&rang;(tflite::HardSwishParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SubElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SubElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifference(signed char, signed char, tflite::ArithmeticParams const&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::GetSubgraphOutput(int, int)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::NumSubgraphOutputs(int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::GetSubgraphInput(int, int)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::NumSubgraphInputs(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::ResetVariableTensors()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[466]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
</UL>

<P><STRONG><a name="[41a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsString() const
</UL>

<P><STRONG><a name="[3ea]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;signed char&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[229]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[467]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_state_s16_s8
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_s8
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[22b]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[468]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;signed char&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;float&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;int, int&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, int const*, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool))
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;int, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;signed char, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;signed char&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;float&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;int&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinearInteger&lang;signed char&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinear&lang;float&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*)
</UL>

<P><STRONG><a name="[469]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[46b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[22d]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[46c]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::ResetVariableTensors()
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
</UL>

<P><STRONG><a name="[46d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
</UL>

<P><STRONG><a name="[46e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::TransposeConv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;short, int&rang;(short const*, int const*, int, short*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;signed char, int&rang;(signed char const*, int const*, int, signed char*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;float, float&rang;(float const*, int const*, int, float*, int const*, int, int const*, int, bool, int*, int*, float*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*)
</UL>

<P><STRONG><a name="[46f]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[24c]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(char const*) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int flexbuffers::KeyCompare&lang;unsigned long long&rang;(void const*, void const*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int flexbuffers::KeyCompare&lang;unsigned int&rang;(void const*, void const*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int flexbuffers::KeyCompare&lang;unsigned short&rang;(void const*, void const*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int flexbuffers::KeyCompare&lang;unsigned char&rang;(void const*, void const*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[21e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[233]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[235]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[220]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[222]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[224]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[228]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[23c]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[470]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[239]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[238]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[237]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[215]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[23b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[23a]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[23d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[212]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[473]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[243]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[210]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[245]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[477]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[23f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[21a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[241]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[242]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[478]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[247]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[14]"></a>BRIDGE_ERROR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.BRIDGE_ERROR_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRIDGE_ERROR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRIDGE_ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CPU0_PPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.CPU0_PPU_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU0_PPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU0_PPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CTI_REQ0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.CTI_REQ0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTI_REQ0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTI_REQ0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CTI_REQ1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.CTI_REQ1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTI_REQ1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTI_REQ1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DEBUG_PPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.DEBUG_PPU_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_PPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_PPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[24b]"></a>DebugLog</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, debug_log.o(.text.DebugLog))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroErrorReporter::Report(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ETHERNET_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.ETHERNET_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ETHOS_U55_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.ETHOS_U55_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOS_U55_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOS_U55_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIO0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIO0_10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_10_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIO0_11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_11_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIO0_12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_12_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIO0_13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_13_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO0_14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_14_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO0_15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_15_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIO0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIO0_4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_4_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIO0_5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO0_6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_6_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO0_7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_7_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO0_8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_8_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO0_9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_9_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO0_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO0_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_10_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_11_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_12_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_13_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_14_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_15_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO1_4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_4_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO1_5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO1_6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_6_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO1_7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_7_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO1_8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_8_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_9_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO1_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO1_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO2_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO2_10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_10_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO2_11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_11_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO2_12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_12_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_13_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_14_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO2_15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_15_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO2_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO2_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_4_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO2_6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_6_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO2_7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_7_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO2_8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_8_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO2_9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_9_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIO2_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO2_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO3_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO3_0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO3_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO3_1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO3_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO3_2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO3_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO3_3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIO3_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.GPIO3_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.I2S_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MGMT_PPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.MGMT_PPU_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGMT_PPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGMT_PPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MPC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.MPC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MSC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.MSC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>MicroVsnprintf</STRONG> (Thumb, 2864 bytes, Stack size 144 bytes, micro_string.o(.text.MicroVsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MicroVsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroErrorReporter::Report(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NONSEC_WATCHDOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.NONSEC_WATCHDOG_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NONSEC_WATCHDOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NONSEC_WATCHDOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NONSEC_WATCHDOG_RESET_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.NONSEC_WATCHDOG_RESET_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NONSEC_WATCHDOG_RESET_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NONSEC_WATCHDOG_RESET_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PPC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.PPC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.Reset_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SLOWCLK_Timer_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SLOWCLK_Timer_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLOWCLK_Timer_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLOWCLK_Timer_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI_ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SPI_ADC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI_SHIELD0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SPI_SHIELD0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SHIELD0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SHIELD0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI_SHIELD1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SPI_SHIELD1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SHIELD1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SHIELD1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SYS_PPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SYS_PPU_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SecureFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_sse300mps3.o(.text.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1c]"></a>System_Timestamp_Counter_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.System_Timestamp_Counter_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Timestamp_Counter_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Timestamp_Counter_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.TIMER0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.TIMER1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.TIMER2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.TIMER3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TOUCH_SCREEN_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.TOUCH_SCREEN_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[3b5]"></a>TfLiteIntArrayEqual</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, common.o(.text.TfLiteIntArrayEqual))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
</UL>

<P><STRONG><a name="[414]"></a>TfLiteIntArrayGetSizeInBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common.o(.text.TfLiteIntArrayGetSizeInBytes))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[258]"></a>TfLiteTypeGetName</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(.text.TfLiteTypeGetName))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsLogicalSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::ceil::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::round::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::ReshapeOutput(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[27]"></a>UART0_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART0_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART1_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART1_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART2_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART2_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART3_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART3_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART4_Combined_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART4_Combined_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Combined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Combined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UART5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UARTOVF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTOVF_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UARTRX0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UARTRX1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UARTRX2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UARTRX3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UARTRX4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX4_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UARTRX5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTRX5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UARTTX0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX0_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UARTTX1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX1_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UARTTX2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX2_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UARTTX3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX3_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UARTTX4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX4_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UARTTX5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UARTTX5_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.USB_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fvp_sse300_mps3.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fvp_sse300_mps3.o(RESET)
</UL>
<P><STRONG><a name="[249]"></a>MicroPrintf(char const*, ...)</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, micro_error_reporter.o(.text._Z11MicroPrintfPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroVsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResetTempAllocations()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddBuiltin(tflite::BuiltinOperator, TfLiteRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsLogicalSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InvokeSubgraph(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::PrepareSubgraphs()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[1af]"></a>int flexbuffers::KeyCompare&lang;unsigned char&rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIhEEiPKvS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int flexbuffers::KeyCompare&lang;unsigned char&rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
</UL>
<P><STRONG><a name="[1b1]"></a>int flexbuffers::KeyCompare&lang;unsigned int&rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIjEEiPKvS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int flexbuffers::KeyCompare&lang;unsigned int&rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
</UL>
<P><STRONG><a name="[1b0]"></a>int flexbuffers::KeyCompare&lang;unsigned short&rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareItEEiPKvS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int flexbuffers::KeyCompare&lang;unsigned short&rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
</UL>
<P><STRONG><a name="[1b2]"></a>int flexbuffers::KeyCompare&lang;unsigned long long&rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, detection_postprocess.o(.text._ZN11flexbuffers10KeyCompareIyEEiPKvS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int flexbuffers::KeyCompare&lang;unsigned long long&rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc)
</UL>
<P><STRONG><a name="[85]"></a>tflite::InitReduce(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite10InitReduceEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 3]<UL><LI> reduce.o(.text._ZN6tflite13Register_MEANEv)
<LI> reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
<LI> reduce.o(.text._ZN6tflite12Register_SUMEv)
</UL>
<P><STRONG><a name="[89]"></a>tflite::LogicalAnd(bool, bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logical_common.o(.text._ZN6tflite10LogicalAndEbb))
<BR>[Address Reference Count : 1]<UL><LI> logical.o(.text._ZN6tflite12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[1bf]"></a>tflite::MicroGraph::NumSubgraphs()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph12NumSubgraphsEv))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1b8]"></a>tflite::MicroGraph::FreeSubgraphs()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph13FreeSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::FreeSubgraphs() &rArr; tflite::NumSubgraphOperators(tflite::Model const*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1b6]"></a>tflite::MicroGraph::InitSubgraphs()</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph13InitSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::InitSubgraphs() &rArr; tflite::NumSubgraphOperators(tflite::Model const*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1b9]"></a>tflite::MicroGraph::InvokeSubgraph(int)</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph14InvokeSubgraphEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::InvokeSubgraph(int) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1bc]"></a>tflite::MicroGraph::GetSubgraphInput(int, int)</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph16GetSubgraphInputEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::GetSubgraphInput(int, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1b7]"></a>tflite::MicroGraph::PrepareSubgraphs()</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph16PrepareSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::PrepareSubgraphs() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1be]"></a>tflite::MicroGraph::GetSubgraphOutput(int, int)</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph17GetSubgraphOutputEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::GetSubgraphOutput(int, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1bb]"></a>tflite::MicroGraph::NumSubgraphInputs(int)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph17NumSubgraphInputsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::NumSubgraphInputs(int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1bd]"></a>tflite::MicroGraph::NumSubgraphOutputs(int)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph18NumSubgraphOutputsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::NumSubgraphOutputs(int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[1ba]"></a>tflite::MicroGraph::ResetVariableTensors()</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph20ResetVariableTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::MicroGraph::ResetVariableTensors() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[3ce]"></a>tflite::MicroGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[3da]"></a>tflite::MicroGraph::MicroGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, micro_graph.o(.text._ZN6tflite10MicroGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroGraph::MicroGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)
</UL>

<P><STRONG><a name="[479]"></a>tflite::MicroGraph::MicroGraph__sub_object(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, micro_graph.o(.text._ZN6tflite10MicroGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE), UNUSED)

<P><STRONG><a name="[1b5]"></a>tflite::MicroGraph::~MicroGraph__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraphD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[3dd]"></a>tflite::MicroGraph::~MicroGraph()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraphD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>

<P><STRONG><a name="[1b4]"></a>tflite::MicroGraph::~MicroGraph__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_graph.o(.text._ZN6tflite10MicroGraphD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_graph.o(.rodata._ZTVN6tflite10MicroGraphE)
</UL>
<P><STRONG><a name="[80]"></a>tflite::MulPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mul_common.o(.text._ZN6tflite10MulPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::MulPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mul.o(.text._ZN6tflite12Register_MULEv)
</UL>
<P><STRONG><a name="[1d4]"></a>tflite::OpResolver::~OpResolver__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZN6tflite10OpResolverD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[b2]"></a>tflite::ParseEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b6]"></a>tflite::ParseFloor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseFloorEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d2]"></a>tflite::ParsePadV2(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParsePadV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d3]"></a>tflite::ParsePrelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParsePreluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d7]"></a>tflite::ParseRelu6(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseRelu6EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[db]"></a>tflite::ParseRound(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseRoundEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[dc]"></a>tflite::ParseRsqrt(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseRsqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[de]"></a>tflite::ParseShape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::ParseShape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e0]"></a>tflite::ParseSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e4]"></a>tflite::ParseSplit(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSplit(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f2]"></a>tflite::ParseWhile(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseWhileEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseWhile(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[75]"></a>tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, add.o(.text._ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareAdd(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[13b]"></a>tflite::PrepareMax(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite10PrepareMaxEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareMax(TfLiteContext*, TfLiteNode*) &rArr; tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
</UL>
<P><STRONG><a name="[257]"></a>tflite::Relu6Float(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, activations_common.o(.text._ZN6tflite10Relu6FloatERKNS_12RuntimeShapeEPKfS2_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::Relu6Float(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[129]"></a>tflite::SelectEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 660 bytes, Stack size 160 bytes, select.o(.text._ZN6tflite10SelectEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tflite::SelectEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, float&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, short&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, signed char&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
</UL>
<P><STRONG><a name="[127]"></a>tflite::SelectInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, select.o(.text._ZN6tflite10SelectInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::SelectInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
</UL>
<P><STRONG><a name="[83]"></a>tflite::SubPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, sub_common.o(.text._ZN6tflite10SubPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::SubPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub.o(.text._ZN6tflite12Register_SUBEv)
</UL>
<P><STRONG><a name="[273]"></a>tflite::AlignSizeUp(unsigned int, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite11AlignSizeUpEjj))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CreatePlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
</UL>

<P><STRONG><a name="[25d]"></a>tflite::CheckedLog2(float, int*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, quantization_util.o(.text._ZN6tflite11CheckedLog2EfPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::CheckedLog2(float, int*) &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[25f]"></a>tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))</STRONG> (Thumb, 462 bytes, Stack size 120 bytes, logical_common.o(.text._ZN6tflite11LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool)) &rArr; void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool))
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogicalAndEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogicalOrEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[265]"></a>tflite::MatchingDim(tflite::RuntimeShape const&, int, tflite::RuntimeShape const&, int)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, depthwise_conv.o(.text._ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::MatchingDim(tflite::RuntimeShape const&, int, tflite::RuntimeShape const&, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[9f]"></a>tflite::ParseArgMax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::ParseArgMax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a0]"></a>tflite::ParseArgMin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::ParseArgMin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[aa]"></a>tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ac]"></a>tflite::ParseCumsum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseCumsumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseCumsum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ba]"></a>tflite::ParseGather(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseGatherEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseGather(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e5]"></a>tflite::ParseSplitV(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseSplitVEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSplitV(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e7]"></a>tflite::ParseSquare(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseSquareEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f0]"></a>tflite::ParseUnpack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseUnpack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[9a]"></a>tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2672 bytes, Stack size 88 bytes, svdf_common.o(.text._ZN6tflite11PrepareSvdfEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svdf.o(.text._ZN6tflite13Register_SVDFEv)
</UL>
<P><STRONG><a name="[267]"></a>tflite::Register_IF()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, if.o(.text._ZN6tflite11Register_IFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_IF()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[97]"></a>tflite::ReluPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, activations_common.o(.text._ZN6tflite11ReluPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::ReluPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite13Register_RELUEv)
</UL>
<P><STRONG><a name="[2b8]"></a>tflite::ElementCount(TfLiteIntArray const&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, micro_utils.o(.text._ZN6tflite12ElementCountERK14TfLiteIntArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::ElementCount(TfLiteIntArray const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[1ca]"></a>tflite::MicroContext::GetEvalTensor(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext13GetEvalTensorEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c4]"></a>tflite::MicroContext::GetScratchBuffer(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext16GetScratchBufferEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c6]"></a>tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[3d0]"></a>tflite::MicroContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[1c2]"></a>tflite::MicroContext::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c7]"></a>tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c5]"></a>tflite::MicroContext::AllocateTempTfLiteTensor(int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::MicroContext::AllocateTempTfLiteTensor(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c9]"></a>tflite::MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c3]"></a>tflite::MicroContext::RequestScratchBufferInArena(unsigned int, int*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tflite::MicroContext::RequestScratchBufferInArena(unsigned int, int*) &rArr; tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[1c8]"></a>tflite::MicroContext::AllocateTempIntermediateTensor(TfLiteNode const*, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[3db]"></a>tflite::MicroContext::MicroContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroGraph*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)
</UL>

<P><STRONG><a name="[47a]"></a>tflite::MicroContext::MicroContext__sub_object(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroGraph*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE), UNUSED)

<P><STRONG><a name="[1c1]"></a>tflite::MicroContext::~MicroContext__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContextD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[3dc]"></a>tflite::MicroContext::~MicroContext()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContextD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>

<P><STRONG><a name="[1c0]"></a>tflite::MicroContext::~MicroContext__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContextD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_context.o(.rodata._ZTVN6tflite12MicroContextE)
</UL>
<P><STRONG><a name="[bc]"></a>tflite::ParseGreater(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseGreaterEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c9]"></a>tflite::ParseMaximum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseMaximumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[cb]"></a>tflite::ParseMinimum(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseMinimumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ca]"></a>tflite::ParseReducer(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseReducer(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d8]"></a>tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e1]"></a>tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e9]"></a>tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseSqueezeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f7]"></a>tflite::PreluPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, prelu_common.o(.text._ZN6tflite12PreluPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::PreluPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prelu.o(.text._ZN6tflite14Register_PRELUEv)
</UL>
<P><STRONG><a name="[26b]"></a>tflite::Register_ADD()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, add.o(.text._ZN6tflite12Register_ADDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_ADD()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[26c]"></a>tflite::Register_DIV()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, div.o(.text._ZN6tflite12Register_DIVEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_DIV()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[26d]"></a>tflite::Register_ELU()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elu.o(.text._ZN6tflite12Register_ELUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_ELU()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[26e]"></a>tflite::Register_EXP()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, exp.o(.text._ZN6tflite12Register_EXPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_EXP()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[26f]"></a>tflite::Register_MUL()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mul.o(.text._ZN6tflite12Register_MULEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_MUL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[270]"></a>tflite::Register_SUB()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sub.o(.text._ZN6tflite12Register_SUBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SUB()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[271]"></a>tflite::Register_SUM()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, reduce.o(.text._ZN6tflite12Register_SUMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SUM()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[fa]"></a>tflite::Relu6Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, activations_common.o(.text._ZN6tflite12Relu6PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Relu6Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite14Register_RELU6Ev)
</UL>
<P><STRONG><a name="[3bf]"></a>tflite::ErrorReporter::ReportError(void*, char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, error_reporter.o(.text._ZN6tflite13ErrorReporter11ReportErrorEPvPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ErrorReporter::ReportError(void*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[252]"></a>tflite::ErrorReporter::Report(char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, error_reporter.o(.text._ZN6tflite13ErrorReporter6ReportEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::OpResolver const&, tflite::ErrorReporter*, TfLiteRegistration const**)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSqueeze(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseShape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseReshape(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseFullyConnected(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseCast(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseArgMin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseArgMax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(tflite::ErrorReporter*, int, int*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
</UL>

<P><STRONG><a name="[1e9]"></a>tflite::ErrorReporter::~ErrorReporter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite13ErrorReporterD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[2eb]"></a>tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)</STRONG> (Thumb, 3392 bytes, Stack size 112 bytes, reduce_common.o(.text._ZN6tflite13EvalMaxHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMax(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ec]"></a>tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)</STRONG> (Thumb, 1876 bytes, Stack size 160 bytes, reduce_common.o(.text._ZN6tflite13EvalSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSum(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[136]"></a>tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, leaky_relu.o(.text._ZN6tflite13LeakyReluEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
</UL>
<P><STRONG><a name="[134]"></a>tflite::LeakyReluInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, leaky_relu.o(.text._ZN6tflite13LeakyReluInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::LeakyReluInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
</UL>
<P><STRONG><a name="[a6]"></a>tflite::ParseCallOnce(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseCallOnceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseCallOnce(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b7]"></a>tflite::ParseFloorDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseFloorDivEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b8]"></a>tflite::ParseFloorMod(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseFloorModEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[bb]"></a>tflite::ParseGatherNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseGatherNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c8]"></a>tflite::ParseLogistic(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseLogisticEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[cf]"></a>tflite::ParseNotEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseNotEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d4]"></a>tflite::ParseQuantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[dd]"></a>tflite::ParseSelectV2(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseSelectV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[2f1]"></a>tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*)</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, reduce_common.o(.text._ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePiS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[2f2]"></a>tflite::Register_CAST()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cast.o(.text._ZN6tflite13Register_CASTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_CAST()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2f3]"></a>tflite::Register_FILL()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fill.o(.text._ZN6tflite13Register_FILLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_FILL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2f4]"></a>tflite::Register_MEAN()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, reduce.o(.text._ZN6tflite13Register_MEANEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_MEAN()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2f5]"></a>tflite::Register_RELU()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, activations.o(.text._ZN6tflite13Register_RELUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_RELU()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2f6]"></a>tflite::Register_SVDF()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, svdf.o(.text._ZN6tflite13Register_SVDFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SVDF()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2e7]"></a>tflite::ReluQuantized(tflite::ReluOpData const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, signed char const*, signed char*)</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, activations_common.o(.text._ZN6tflite13ReluQuantizedERKNS_10ReluOpDataERKNS_12RuntimeShapeES5_PKaPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::ReluQuantized(tflite::ReluOpData const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, signed char const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[128]"></a>tflite::SelectPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 712 bytes, Stack size 152 bytes, select.o(.text._ZN6tflite13SelectPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tflite::SelectPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> select.o(.text._ZN6tflite18Register_SELECT_V2Ev)
</UL>
<P><STRONG><a name="[2f7]"></a>void tflite::reference_ops::Requantize&lang;signed char, unsigned char&rang;(signed char const*, int, int, int, int, int, unsigned char*)</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, quantize_common.o(.text._ZN6tflite13reference_ops10RequantizeIahEEvPKT_iiiiiPT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Requantize&lang;signed char, unsigned char&rang;(signed char const*, int, int, int, int, int, unsigned char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2f8]"></a>void tflite::reference_ops::Requantize&lang;unsigned char, signed char&rang;(unsigned char const*, int, int, int, int, int, signed char*)</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, quantize_common.o(.text._ZN6tflite13reference_ops10RequantizeIhaEEvPKT_iiiiiPT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Requantize&lang;unsigned char, signed char&rang;(unsigned char const*, int, int, int, int, int, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2f9]"></a>tflite::reference_ops::AveragePool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 832 bytes, Stack size 176 bytes, pooling_common.o(.text._ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::AveragePool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[286]"></a>void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)</STRONG> (Thumb, 466 bytes, Stack size 176 bytes, broadcast_to.o(.text._ZN6tflite13reference_ops11BroadcastToILi5EEEvRKNS_12RuntimeShapeEPKcS4_Pc10TfLiteType))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType) &rArr; void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) &rArr;  void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteTypeGetSize(TfLiteType)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b3]"></a>void tflite::reference_ops::DepthToSpace&lang;signed char&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 772 bytes, Stack size 184 bytes, depth_to_space.o(.text._ZN6tflite13reference_ops12DepthToSpaceIaEEvRKNS_18DepthToSpaceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::DepthToSpace&lang;signed char&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b2]"></a>void tflite::reference_ops::DepthToSpace&lang;float&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 792 bytes, Stack size 184 bytes, depth_to_space.o(.text._ZN6tflite13reference_ops12DepthToSpaceIfEEvRKNS_18DepthToSpaceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::DepthToSpace&lang;float&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c6]"></a>void tflite::reference_ops::SpaceToDepth&lang;signed char&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 740 bytes, Stack size 176 bytes, space_to_depth.o(.text._ZN6tflite13reference_ops12SpaceToDepthIaEEvRKNS_18SpaceToDepthParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SpaceToDepth&lang;signed char&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c5]"></a>void tflite::reference_ops::SpaceToDepth&lang;float&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 752 bytes, Stack size 176 bytes, space_to_depth.o(.text._ZN6tflite13reference_ops12SpaceToDepthIfEEvRKNS_18SpaceToDepthParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SpaceToDepth&lang;float&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2fc]"></a>void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)</STRONG> (Thumb, 1656 bytes, Stack size 208 bytes, strided_slice.o(.text._ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*) &rArr; tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2fe]"></a>void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*)</STRONG> (Thumb, 1812 bytes, Stack size 312 bytes, strided_slice.o(.text._ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*) &rArr; tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ff]"></a>void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)</STRONG> (Thumb, 1840 bytes, Stack size 336 bytes, strided_slice.o(.text._ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*) &rArr; tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[300]"></a>void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)</STRONG> (Thumb, 1698 bytes, Stack size 216 bytes, strided_slice.o(.text._ZN6tflite13reference_ops12StridedSliceIiEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*) &rArr; tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[301]"></a>void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)</STRONG> (Thumb, 1848 bytes, Stack size 304 bytes, strided_slice.o(.text._ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*) &rArr; tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[28a]"></a>void tflite::reference_ops::BroadcastArgs&lang;int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, broadcast_args.o(.text._ZN6tflite13reference_ops13BroadcastArgsIiEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastArgs&lang;int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[28b]"></a>void tflite::reference_ops::BroadcastArgs&lang;long long&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, broadcast_args.o(.text._ZN6tflite13reference_ops13BroadcastArgsIxEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastArgs&lang;long long&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2fb]"></a>void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, broadcast_to.o(.text._ZN6tflite13reference_ops13BroadcastImplILi5EEEvRKNS_11NdArrayDescIXT_EEEPKcS5_PcPiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) &rArr;  void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
</UL>

<P><STRONG><a name="[302]"></a>void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[303]"></a>void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[304]"></a>void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[305]"></a>void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[306]"></a>void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[307]"></a>void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*)</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, concatenation.o(.text._ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ad]"></a>tflite::reference_ops::DepthwiseConv(tflite::DepthwiseParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 904 bytes, Stack size 224 bytes, depthwise_conv.o(.text._ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::DepthwiseConv(tflite::DepthwiseParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c9]"></a>tflite::reference_ops::TransposeConv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 1190 bytes, Stack size 216 bytes, transpose_conv.o(.text._ZN6tflite13reference_ops13TransposeConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::TransposeConv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c7]"></a>void tflite::reference_ops::TransposeImpl&lang;signed char, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 912 bytes, Stack size 224 bytes, transpose.o(.text._ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::TransposeImpl&lang;signed char, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c8]"></a>void tflite::reference_ops::TransposeImpl&lang;int, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 960 bytes, Stack size 264 bytes, transpose.o(.text._ZN6tflite13reference_ops13TransposeImplIiLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::TransposeImpl&lang;int, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[309]"></a>void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)</STRONG> (Thumb, 692 bytes, Stack size 112 bytes, add.o(.text._ZN6tflite13reference_ops14AddElementwiseIsEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddGeneralParamScale(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
</UL>

<P><STRONG><a name="[2a9]"></a>void tflite::reference_ops::BatchToSpaceND&lang;signed char&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 402 bytes, Stack size 120 bytes, batch_to_space_nd.o(.text._ZN6tflite13reference_ops14BatchToSpaceNDIaEEvRKNS_12RuntimeShapeEPKT_S4_PKiS4_S9_S4_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BatchToSpaceND&lang;signed char&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2a8]"></a>void tflite::reference_ops::BatchToSpaceND&lang;float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 434 bytes, Stack size 128 bytes, batch_to_space_nd.o(.text._ZN6tflite13reference_ops14BatchToSpaceNDIfEEvRKNS_12RuntimeShapeEPKT_S4_PKiS4_S9_S4_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BatchToSpaceND&lang;float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b7]"></a>void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, div.o(.text._ZN6tflite13reference_ops14DivElementwiseIaEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2af]"></a>tflite::reference_ops::FullyConnected(tflite::FullyConnectedParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, fully_connected.o(.text._ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::FullyConnected(tflite::FullyConnectedParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2bd]"></a>void tflite::reference_ops::ResizeBilinear&lang;float&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 1456 bytes, Stack size 240 bytes, resize_bilinear.o(.text._ZN6tflite13reference_ops14ResizeBilinearIfEEvRKNS_20ResizeBilinearParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ResizeBilinear&lang;float&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c4]"></a>void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 544 bytes, Stack size 152 bytes, space_to_batch_nd.o(.text._ZN6tflite13reference_ops14SpaceToBatchNDIaEEvRKNS_18SpaceToBatchParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_SC_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c3]"></a>void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 574 bytes, Stack size 160 bytes, space_to_batch_nd.o(.text._ZN6tflite13reference_ops14SpaceToBatchNDIfEEvRKNS_18SpaceToBatchParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_SC_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[30b]"></a>void tflite::reference_ops::SubElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, sub.o(.text._ZN6tflite13reference_ops14SubElementwiseIaEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SubElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[30c]"></a>void tflite::reference_ops::SubElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)</STRONG> (Thumb, 634 bytes, Stack size 112 bytes, sub.o(.text._ZN6tflite13reference_ops14SubElementwiseIsEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::SubElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
</UL>

<P><STRONG><a name="[30d]"></a>tflite::reference_ops::L2Normalization(tflite::L2NormalizationParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float)</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, l2norm.o(.text._ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::L2Normalization(tflite::L2NormalizationParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b6]"></a>void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 336 bytes, Stack size 208 bytes, div.o(.text._ZN6tflite13reference_ops16BroadcastDivSlowIfLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[311]"></a>void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 324 bytes, Stack size 192 bytes, sub.o(.text._ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS7_S9_S7_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[313]"></a>void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, leaky_relu.o(.text._ZN6tflite13reference_ops17QuantizeLeakyReluIaEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[314]"></a>void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, leaky_relu.o(.text._ZN6tflite13reference_ops17QuantizeLeakyReluIsEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[315]"></a>std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 586 bytes, Stack size 264 bytes, add.o(.text._ZN6tflite13reference_ops18BroadcastAdd4DSlowIfEENSt3__29enable_ifIXntsr16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SC_SE_SC_PS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[296]"></a>std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 1250 bytes, Stack size 384 bytes, add.o(.text._ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt3__29enable_ifIXsr16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SC_SE_SC_PS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[317]"></a>void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 612 bytes, Stack size 280 bytes, mul_common.o(.text._ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[318]"></a>void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 622 bytes, Stack size 272 bytes, mul_common.o(.text._ZN6tflite13reference_ops18BroadcastMul4DSlowIiEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2ed]"></a>bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)</STRONG> (Thumb, 2056 bytes, Stack size 152 bytes, reduce_common.o(.text._ZN6tflite13reference_ops18QuantizedMeanOrSumIaiEEbPKT_ifPKiiPS2_ifS6_iS6_ibPiS8_PT0_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[2ee]"></a>bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)</STRONG> (Thumb, 1866 bytes, Stack size 152 bytes, reduce_common.o(.text._ZN6tflite13reference_ops18QuantizedMeanOrSumIsiEEbPKT_ifPKiiPS2_ifS6_iS6_ibPiS8_PT0_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[297]"></a>tflite::reference_ops::AddGeneralParamScale(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, add.o(.text._ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::AddGeneralParamScale(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::AddElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[319]"></a>void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 942 bytes, Stack size 272 bytes, prelu.o(.text._ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[31a]"></a>void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 358 bytes, Stack size 192 bytes, sub.o(.text._ZN6tflite13reference_ops21BroadcastQuantSubSlowIaLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[31c]"></a>void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 358 bytes, Stack size 192 bytes, sub.o(.text._ZN6tflite13reference_ops21BroadcastQuantSubSlowIsLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[31e]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[31f]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[320]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[321]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[322]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[323]"></a>void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 712 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops21ComparisonWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2be]"></a>void tflite::reference_ops::ResizeBilinearInteger&lang;signed char&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 1596 bytes, Stack size 312 bytes, resize_bilinear.o(.text._ZN6tflite13reference_ops21ResizeBilinearIntegerIaEEvRKNS_20ResizeBilinearParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ResizeBilinearInteger&lang;signed char&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[324]"></a>void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 684 bytes, Stack size 152 bytes, resize_nearest_neighbor.o(.text._ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[325]"></a>void tflite::reference_ops::ResizeNearestNeighbor&lang;int&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 704 bytes, Stack size 160 bytes, resize_nearest_neighbor.o(.text._ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ResizeNearestNeighbor&lang;int&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[326]"></a>void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 704 bytes, Stack size 160 bytes, resize_nearest_neighbor.o(.text._ZN6tflite13reference_ops21ResizeNearestNeighborIsEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[281]"></a>tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)</STRONG> (Thumb, 646 bytes, Stack size 88 bytes, add.o(.text._ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2b5]"></a>void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 412 bytes, Stack size 200 bytes, div.o(.text._ZN6tflite13reference_ops25BroadcastDivSlowQuantizedIaLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[329]"></a>void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))</STRONG> (Thumb, 604 bytes, Stack size 224 bytes, maximum_minimum.o(.text._ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*) const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32b]"></a>void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))</STRONG> (Thumb, 572 bytes, Stack size 224 bytes, maximum_minimum.o(.text._ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*) const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32d]"></a>void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))</STRONG> (Thumb, 572 bytes, Stack size 224 bytes, maximum_minimum.o(.text._ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*) const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32f]"></a>void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))</STRONG> (Thumb, 572 bytes, Stack size 224 bytes, maximum_minimum.o(.text._ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*) const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[264]"></a>void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool))</STRONG> (Thumb, 410 bytes, Stack size 200 bytes, logical_common.o(.text._ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
</UL>

<P><STRONG><a name="[298]"></a>void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))</STRONG> (Thumb, 428 bytes, Stack size 208 bytes, floor_div.o(.text._ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIfffEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[299]"></a>void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))</STRONG> (Thumb, 420 bytes, Stack size 208 bytes, squared_difference.o(.text._ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIiiiEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[331]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::NotEqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 472 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::NotEqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[333]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::EqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 472 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::EqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[334]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::NotEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::NotEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[335]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[336]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[337]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[338]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::EqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::EqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[339]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 488 bytes, Stack size 256 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33a]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33b]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33c]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33d]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33e]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33f]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 482 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[340]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::NotEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 492 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::NotEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[341]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 490 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[342]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 490 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[343]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 490 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[344]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::EqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 492 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::EqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[345]"></a>void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 490 bytes, Stack size 264 bytes, comparisons.o(.text._ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[332]"></a>tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, comparisons.o(.text._ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::NotEqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::NotEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::NotEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::EqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::EqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::EqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
</UL>

<P><STRONG><a name="[346]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[347]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[348]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[349]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34a]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34b]"></a>void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)</STRONG> (Thumb, 908 bytes, Stack size 328 bytes, comparisons.o(.text._ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34c]"></a>tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sub.o(.text._ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::reference_ops::SubElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SubElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[34d]"></a>tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sub.o(.text._ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::reference_ops::SubElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SubElementwise&lang;short&rang;(int, tflite::ArithmeticParams const&, short const*, short const*, short*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2a6]"></a>tflite::reference_ops::AddN(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, unsigned int, signed char const* const*, signed char*)</STRONG> (Thumb, 1390 bytes, Stack size 80 bytes, add_n.o(.text._ZN6tflite13reference_ops4AddNERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEjPKPKaPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::AddN(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, unsigned int, signed char const* const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ab]"></a>tflite::reference_ops::Conv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 792 bytes, Stack size 192 bytes, conv.o(.text._ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::Conv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34e]"></a>bool tflite::reference_ops::Mean&lang;signed char, int&rang;(signed char const*, int const*, int, signed char*, int const*, int, int const*, int, bool, int*, int*, int*)</STRONG> (Thumb, 1704 bytes, Stack size 88 bytes, reduce_common.o(.text._ZN6tflite13reference_ops4MeanIaiEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bool tflite::reference_ops::Mean&lang;signed char, int&rang;(signed char const*, int const*, int, signed char*, int const*, int, int const*, int, bool, int*, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[34f]"></a>void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 764 bytes, Stack size 184 bytes, reduce_common.o(.text._ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[350]"></a>bool tflite::reference_ops::Mean&lang;float, float&rang;(float const*, int const*, int, float*, int const*, int, int const*, int, bool, int*, int*, float*)</STRONG> (Thumb, 1766 bytes, Stack size 96 bytes, reduce_common.o(.text._ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = bool tflite::reference_ops::Mean&lang;float, float&rang;(float const*, int const*, int, float*, int const*, int, int const*, int, bool, int*, int*, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[351]"></a>bool tflite::reference_ops::Mean&lang;short, int&rang;(short const*, int const*, int, short*, int const*, int, int const*, int, bool, int*, int*, int*)</STRONG> (Thumb, 1670 bytes, Stack size 88 bytes, reduce_common.o(.text._ZN6tflite13reference_ops4MeanIsiEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bool tflite::reference_ops::Mean&lang;short, int&rang;(short const*, int const*, int, short*, int const*, int, int const*, int, bool, int*, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[2c2]"></a>void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, slice.o(.text._ZN6tflite13reference_ops5SliceIaEEvRKNS_11SliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*) &rArr; tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2bf]"></a>void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)</STRONG> (Thumb, 472 bytes, Stack size 104 bytes, slice.o(.text._ZN6tflite13reference_ops5SliceIfEEvRKNS_11SliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*) &rArr; tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c0]"></a>void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, slice.o(.text._ZN6tflite13reference_ops5SliceIiEEvRKNS_11SliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*) &rArr; tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c1]"></a>void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, slice.o(.text._ZN6tflite13reference_ops5SliceIsEEvRKNS_11SliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*) &rArr; tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b1]"></a>tflite::reference_ops::CumSum(tflite::ArithmeticParams const&, signed char const*, tflite::RuntimeShape const&, int, bool, bool, signed char*)</STRONG> (Thumb, 1088 bytes, Stack size 72 bytes, cumsum.o(.text._ZN6tflite13reference_ops6CumSumERKNS_16ArithmeticParamsEPKaRKNS_12RuntimeShapeEibbPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::CumSum(tflite::ArithmeticParams const&, signed char const*, tflite::RuntimeShape const&, int, bool, bool, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b0]"></a>void tflite::reference_ops::CumSum&lang;float&rang;(float const*, tflite::RuntimeShape const&, int, bool, bool, float*)</STRONG> (Thumb, 1064 bytes, Stack size 64 bytes, cumsum.o(.text._ZN6tflite13reference_ops6CumSumIfEEvPKT_RKNS_12RuntimeShapeEibbPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::CumSum&lang;float&rang;(float const*, tflite::RuntimeShape const&, int, bool, bool, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2d3]"></a>tflite::reference_ops::L2Pool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 900 bytes, Stack size 200 bytes, l2_pool_2d.o(.text._ZN6tflite13reference_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::L2Pool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[259]"></a>void tflite::reference_ops::Select&lang;bool, signed char&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, select.o(.text._ZN6tflite13reference_ops6SelectIbaEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_SA_S4_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Select&lang;bool, signed char&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[25b]"></a>void tflite::reference_ops::Select&lang;bool, float&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, select.o(.text._ZN6tflite13reference_ops6SelectIbfEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_SA_S4_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Select&lang;bool, float&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[25a]"></a>void tflite::reference_ops::Select&lang;bool, short&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, select.o(.text._ZN6tflite13reference_ops6SelectIbsEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_SA_S4_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::Select&lang;bool, short&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[354]"></a>tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 792 bytes, Stack size 176 bytes, pooling_common.o(.text._ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[355]"></a>void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 858 bytes, Stack size 192 bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[356]"></a>void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 852 bytes, Stack size 176 bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[357]"></a>void tflite::reference_ops::PadImpl&lang;int, int&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, int const*, int const*, tflite::RuntimeShape const&, int*)</STRONG> (Thumb, 828 bytes, Stack size 184 bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;int, int&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, int const*, int const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[358]"></a>void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 828 bytes, Stack size 184 bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[27a]"></a>tflite::reference_ops::Softmax(tflite::SoftmaxParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 568 bytes, Stack size 120 bytes, softmax.o(.text._ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::Softmax(tflite::SoftmaxParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[8f]"></a>float tflite::reference_ops::FloorDiv&lang;float&rang;(float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, floor_div.o(.text._ZN6tflite13reference_ops8FloorDivIfEET_S2_S2_))
<BR>[Address Reference Count : 1]<UL><LI> floor_div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[90]"></a>float tflite::reference_ops::FloorMod&lang;float&rang;(float, float)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, floor_mod.o(.text._ZN6tflite13reference_ops8FloorModIfEET_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = float tflite::reference_ops::FloorMod&lang;float&rang;(float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[359]"></a>void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)</STRONG> (Thumb, 642 bytes, Stack size 96 bytes, arg_min_max.o(.text._ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>

<P><STRONG><a name="[35a]"></a>void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)</STRONG> (Thumb, 642 bytes, Stack size 96 bytes, arg_min_max.o(.text._ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>

<P><STRONG><a name="[35b]"></a>void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)</STRONG> (Thumb, 690 bytes, Stack size 96 bytes, arg_min_max.o(.text._ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>

<P><STRONG><a name="[35c]"></a>void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)</STRONG> (Thumb, 690 bytes, Stack size 96 bytes, arg_min_max.o(.text._ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>

<P><STRONG><a name="[284]"></a>void tflite::reference_ops::HardSwish&lang;signed char&rang;(tflite::HardSwishParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, hard_swish.o(.text._ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::HardSwish&lang;signed char&rang;(tflite::HardSwishParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2fd]"></a>tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int)</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, strided_slice.o(.text._ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tflite::strided_slice::StridedSlicePadIndices(tflite::StridedSliceParams*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
</UL>

<P><STRONG><a name="[3bb]"></a>tflite::AlignPointerUp(unsigned char*, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite14AlignPointerUpEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
</UL>

<P><STRONG><a name="[35d]"></a>tflite::AllOpsResolver::AllOpsResolver()</STRONG> (Thumb, 2712 bytes, Stack size 64 bytes, all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tflite::AllOpsResolver::AllOpsResolver() &rArr; tflite::MicroMutableOpResolver&lang;128u&rang;::AddBuiltin(tflite::BuiltinOperator, TfLiteRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ZEROS_LIKE()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_WHILE()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_VAR_HANDLE()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_UNPACK()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE_CONV()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_TANH()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SVDF()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SUM()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SUB()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_STRIDED_SLICE()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SQUEEZE()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SQUARED_DIFFERENCE()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SQUARE()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SQRT()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SPLIT_V()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SPLIT()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SPACE_TO_DEPTH()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SPACE_TO_BATCH_ND()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SOFTMAX()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SLICE()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SIN()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SHAPE()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SELECT_V2()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RSQRT()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ROUND()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RESIZE_BILINEAR()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RESHAPE()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RELU6()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RELU()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_REDUCE_MAX()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_READ_VARIABLE()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_QUANTIZE()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_PRELU()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PADV2()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PAD()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PACK()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_NOT_EQUAL()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_NEG()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MUL()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MIRROR_PAD()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_MINIMUM()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MEAN()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_MAXIMUM()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MAX_POOL_2D()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGISTIC()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGICAL_OR()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LOGICAL_NOT()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGICAL_AND()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LOG()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LESS_EQUAL()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LESS()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LEAKY_RELU()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_L2_POOL_2D()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_L2_NORMALIZATION()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_IF()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_HARD_SWISH()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_GREATER_EQUAL()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_GREATER()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_GATHER_ND()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_GATHER()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FULLY_CONNECTED()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FLOOR_MOD()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FLOOR_DIV()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_FLOOR()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FILL()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_EXPAND_DIMS()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_EXP()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_EQUAL()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ELU()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DIV()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DETECTION_POSTPROCESS()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEQUANTIZE()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTHWISE_CONV_2D()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTH_TO_SPACE()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CUMSUM()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_COS()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONV_2D()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_CONCATENATION()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CIRCULAR_BUFFER()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_CEIL()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CAST()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CALL_ONCE()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BROADCAST_TO()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BROADCAST_ARGS()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BATCH_TO_SPACE_ND()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_AVERAGE_POOL_2D()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ASSIGN_VARIABLE()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ARG_MIN()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ARG_MAX()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD_N()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddBuiltin(tflite::BuiltinOperator, TfLiteRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ABS()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47b]"></a>tflite::AllOpsResolver::AllOpsResolver__sub_object()</STRONG> (Thumb, 2712 bytes, Stack size 64 bytes, all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev), UNUSED)

<P><STRONG><a name="[1d5]"></a>tflite::AllOpsResolver::~AllOpsResolver__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[12e]"></a>tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1440 bytes, Stack size 80 bytes, dequantize.o(.text._ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::DequantizeEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[12c]"></a>tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dequantize.o(.text._ZN6tflite14DequantizeInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[3b1]"></a>tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)</STRONG> (Thumb, 1144 bytes, Stack size 144 bytes, reduce_common.o(.text._ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;short, int&rang;(short const*, int, float, int const*, int, short*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::QuantizedMeanOrSum&lang;signed char, int&rang;(signed char const*, int, float, int const*, int, signed char*, int, float, int const*, int, int const*, int, bool, int*, int*, int*, bool)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;short, int&rang;(short const*, int const*, int, short*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;signed char, int&rang;(signed char const*, int const*, int, signed char*, int const*, int, int const*, int, bool, int*, int*, int*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::reference_ops::Mean&lang;float, float&rang;(float const*, int const*, int, float*, int const*, int, int const*, int, bool, int*, int*, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMean(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3b4]"></a>tflite::GetBuiltinCode(tflite::OperatorCode const*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, schema_utils.o(.text._ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::GetBuiltinCode(tflite::OperatorCode const*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::OpResolver const&, tflite::ErrorReporter*, TfLiteRegistration const**)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[253]"></a>tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_util.o(.text._ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayEqual
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SelectPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1e4]"></a>tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1de]"></a>tflite::MicroAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1dd]"></a>tflite::MicroAllocator::ResetTempAllocations()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[3b6]"></a>tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::StartModelAllocation(tflite::Model const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[3b7]"></a>tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[1e7]"></a>tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*) &rArr; tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::ReportError(void*, char const*, ...)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CommitPlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CreatePlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::FreeAllocationInfo()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[3d3]"></a>tflite::MicroAllocator::GetBuiltinDataAllocator()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[1df]"></a>tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1db]"></a>tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1e3]"></a>tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1dc]"></a>tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[269]"></a>tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::RequestScratchBufferInArena(unsigned int, int*)
</UL>

<P><STRONG><a name="[1e2]"></a>tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1e8]"></a>tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[24e]"></a>tflite::MicroAllocator::FinishPrepareNodeAllocations(int)</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::PrepareSubgraphs()
</UL>

<P><STRONG><a name="[1da]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1e6]"></a>tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool) &rArr; tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*) &rArr; tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[1e5]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[3c3]"></a>tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*) &rArr; tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)
</UL>

<P><STRONG><a name="[1e1]"></a>tflite::MicroAllocator::~MicroAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[47c]"></a>tflite::MicroAllocator::~MicroAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev), UNUSED)

<P><STRONG><a name="[1e0]"></a>tflite::MicroAllocator::~MicroAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[be]"></a>tflite::ParseHardSwish(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseHardSwishEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c1]"></a>tflite::ParseLeakyRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseLeakyReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseLeakyRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c3]"></a>tflite::ParseLessEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseLessEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c7]"></a>tflite::ParseLogicalOr(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseLogicalOrEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[cc]"></a>tflite::ParseMirrorPad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseMirrorPadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseMirrorPad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ee]"></a>tflite::ParseTranspose(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseTransposeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f1]"></a>tflite::ParseVarHandle(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseVarHandleEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseVarHandle(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f3]"></a>tflite::ParseZerosLike(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseZerosLikeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[275]"></a>tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, pooling_common.o(.text._ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[360]"></a>tflite::Register_ADD_N()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, add_n.o(.text._ZN6tflite14Register_ADD_NEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_ADD_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[392]"></a>tflite::Register_PRELU()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, prelu.o(.text._ZN6tflite14Register_PRELUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_PRELU()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[396]"></a>tflite::Register_RELU6()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, activations.o(.text._ZN6tflite14Register_RELU6Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_RELU6()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39d]"></a>tflite::Register_SHAPE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, shape.o(.text._ZN6tflite14Register_SHAPEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SHAPE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39f]"></a>tflite::Register_SLICE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, slice.o(.text._ZN6tflite14Register_SLICEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SLICE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3af]"></a>tflite::Register_WHILE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, while.o(.text._ZN6tflite14Register_WHILEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_WHILE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2ea]"></a>tflite::Relu6Quantized(signed char, signed char, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, activations_common.o(.text._ZN6tflite14Relu6QuantizedEaaRKNS_12RuntimeShapeEPKaS2_Pa))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Relu6Quantized(signed char, signed char, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2aa]"></a>tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, conv_common.o(.text._ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RuntimePaddingType(TfLitePadding)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3c7]"></a>tflite::EvalTensorBytes(TfLiteEvalTensor const*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, micro_utils.o(.text._ZN6tflite15EvalTensorBytesEPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::EvalTensorBytes(TfLiteEvalTensor const*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)
</UL>

<P><STRONG><a name="[117]"></a>tflite::LogisticPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logistic_common.o(.text._ZN6tflite15LogisticPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::LogisticPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*) &rArr; tflite::CalculateInputRadius(int, int, int) &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
</UL>
<P><STRONG><a name="[310]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, div.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops16BroadcastDivSlowIfLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S8_SB_S8_PS9_EUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
</UL>

<P><STRONG><a name="[312]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)</STRONG> (Thumb, 262 bytes, Stack size 68 bytes, sub.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
</UL>

<P><STRONG><a name="[32a]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*) const&, int*)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, maximum_minimum.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
</UL>

<P><STRONG><a name="[32c]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*) const&, int*)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, maximum_minimum.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
</UL>

<P><STRONG><a name="[32e]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*) const&, int*)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, maximum_minimum.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
</UL>

<P><STRONG><a name="[330]"></a>std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*) const&, int*)</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, maximum_minimum.o(.text._ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt3__29enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::enable_if&lang;(4) == ((5) - (1)), void&rang;::type tflite::NDOpsHelperImpl&lang;5, 4, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*)&rang;(tflite::NdArrayDesc&lang;5&rang; const&, void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))::'lambda'(int*) const&, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
</UL>

<P><STRONG><a name="[af]"></a>tflite::ParseDequantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b4]"></a>tflite::ParseExpandDims(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite15ParseExpandDimsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c5]"></a>tflite::ParseLogicalAnd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite15ParseLogicalAndEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c6]"></a>tflite::ParseLogicalNot(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite15ParseLogicalNotEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[36e]"></a>tflite::Register_CUMSUM()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cumsum.o(.text._ZN6tflite15Register_CUMSUMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_CUMSUM()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3f7]"></a>tflite::Register_ETHOSU()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethosu.o(.text._ZN6tflite15Register_ETHOSUEv))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU()
</UL>

<P><STRONG><a name="[37a]"></a>tflite::Register_GATHER()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gather.o(.text._ZN6tflite15Register_GATHEREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_GATHER()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3ff]"></a>tflite::AlignPointerDown(unsigned char*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite16AlignPointerDownEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[3ca]"></a>tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 424 bytes, Stack size 224 bytes, sub.o(.text._ZN6tflite16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS_9OpDataSubEPK16TfLiteEvalTensorSB_PS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Sub(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3f8]"></a>tflite::GetString_ETHOSU()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethosu.o(.text._ZN6tflite16GetString_ETHOSUEv))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU()
</UL>

<P><STRONG><a name="[130]"></a>tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, hard_swish_common.o(.text._ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DownScaleInt32ToInt16Multiplier(int, short*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
</UL>
<P><STRONG><a name="[135]"></a>tflite::LeakyReluPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, leaky_relu_common.o(.text._ZN6tflite16LeakyReluPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::LeakyReluPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv)
</UL>
<P><STRONG><a name="[353]"></a>tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, select.o(.text._ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::MatchingFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, float&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, short&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Select&lang;bool, signed char&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[3cd]"></a>tflite::MicroInterpreter::AllocateTensors()</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::ResetVariableTensors()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::PrepareSubgraphs()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InitSubgraphs()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cf]"></a>tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()</STRONG> (Thumb, 908 bytes, Stack size 88 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int&rang; const*)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::OpResolver const&, tflite::ErrorReporter*, TfLiteRegistration const**)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::NumSubgraphs()
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetBuiltinDataAllocator()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[3d6]"></a>tflite::MicroInterpreter::input(unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter5inputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::input(unsigned int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d7]"></a>tflite::MicroInterpreter::Invoke()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6InvokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InvokeSubgraph(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d8]"></a>tflite::MicroInterpreter::output(unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6outputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::output(unsigned int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d9]"></a>tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*) &rArr; tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*) &rArr; tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::MicroGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::MicroContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroGraph*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47d]"></a>tflite::MicroInterpreter::MicroInterpreter__sub_object(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE), UNUSED)

<P><STRONG><a name="[1b3]"></a>tflite::MicroInterpreter::~MicroInterpreter()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::~MicroInterpreter() &rArr; tflite::MicroGraph::FreeSubgraphs() &rArr; tflite::NumSubgraphOperators(tflite::Model const*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::~MicroGraph()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::FreeSubgraphs()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::~MicroContext()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[47e]"></a>tflite::MicroInterpreter::~MicroInterpreter__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>tflite::ParseBroadcastTo(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite16ParseBroadcastToEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[256]"></a>tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, reduce_common.o(.text._ZN6tflite16PrepareMaxHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMax(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[86]"></a>tflite::PrepareMeanOrSum(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareMeanOrSum(TfLiteContext*, TfLiteNode*) &rArr; tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> reduce.o(.text._ZN6tflite13Register_MEANEv)
<LI> reduce.o(.text._ZN6tflite12Register_SUMEv)
</UL>
<P><STRONG><a name="[36c]"></a>tflite::Register_CONV_2D()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, conv.o(.text._ZN6tflite16Register_CONV_2DEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_CONV_2D()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a0]"></a>tflite::Register_SOFTMAX()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, softmax.o(.text._ZN6tflite16Register_SOFTMAXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SOFTMAX()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a8]"></a>tflite::Register_SQUEEZE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, squeeze.o(.text._ZN6tflite16Register_SQUEEZEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SQUEEZE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3c8]"></a>tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalTensorBytes(TfLiteEvalTensor const*)
</UL>

<P><STRONG><a name="[3df]"></a>tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[12d]"></a>tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, dequantize_common.o(.text._ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[3e1]"></a>tflite::FlexbufferWrapper::FlexbufferWrapper(unsigned char const*, unsigned int)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, flatbuffer_utils.o(.text._ZN6tflite17FlexbufferWrapperC2EPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::FlexbufferWrapper::FlexbufferWrapper(unsigned char const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[47f]"></a>tflite::FlexbufferWrapper::FlexbufferWrapper__sub_object(unsigned char const*, unsigned int)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, flatbuffer_utils.o(.text._ZN6tflite17FlexbufferWrapperC2EPKhj), UNUSED)

<P><STRONG><a name="[ad]"></a>tflite::ParseDepthToSpace(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ParseDepthToSpaceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseDepthToSpace(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[bd]"></a>tflite::ParseGreaterEqual(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ParseGreaterEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d5]"></a>tflite::ParseReadVariable(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ParseReadVariableEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e3]"></a>tflite::ParseSpaceToDepth(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ParseSpaceToDepthEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSpaceToDepth(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ea]"></a>tflite::ParseStridedSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseStridedSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[2ef]"></a>void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, leaky_relu.o(.text._ZN6tflite17QuantizeLeakyReluIaEEvRKNS_15LeakyReluOpDataEPK16TfLiteEvalTensorPS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2f0]"></a>void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, leaky_relu.o(.text._ZN6tflite17QuantizeLeakyReluIsEEvRKNS_15LeakyReluOpDataEPK16TfLiteEvalTensorPS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[388]"></a>tflite::Register_LOGISTIC()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, logistic.o(.text._ZN6tflite17Register_LOGISTICEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_LOGISTIC()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[393]"></a>tflite::Register_QUANTIZE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, quantize.o(.text._ZN6tflite17Register_QUANTIZEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_QUANTIZE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2fa]"></a>tflite::TfLiteTypeGetSize(TfLiteType)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kernel_util.o(.text._ZN6tflite17TfLiteTypeGetSizeE10TfLiteType))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
</UL>

<P><STRONG><a name="[251]"></a>tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*)</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, mul_common.o(.text._ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MulPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[25c]"></a>tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*)</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, sub_common.o(.text._ZN6tflite18CalculateOpDataSubEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataSubE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[15b]"></a>tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, circular_buffer.o(.text._ZN6tflite18CircularBufferEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
</UL>
<P><STRONG><a name="[159]"></a>tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, circular_buffer.o(.text._ZN6tflite18CircularBufferInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlexbufferWrapper::FlexbufferWrapper(unsigned char const*, unsigned int)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlexbufferWrapper::ElementAsInt32(unsigned int) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
</UL>
<P><STRONG><a name="[1eb]"></a>tflite::MicroErrorReporter::Report(char const*, std::__va_list)</STRONG> (Thumb, 44 bytes, Stack size 264 bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tflite::MicroErrorReporter::Report(char const*, std::__va_list) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroVsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[1ea]"></a>tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[a4]"></a>tflite::ParseBroadcastArgs(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite18ParseBroadcastArgsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a9]"></a>tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ef]"></a>tflite::ParseTransposeConv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite18ParseTransposeConvEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseTransposeConv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[266]"></a>tflite::QuantizeMultiplier(double, int*, int*)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, quantization_util.o(.text._ZN6tflite18QuantizeMultiplierEdPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[368]"></a>tflite::Register_CALL_ONCE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_CALL_ONCE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[377]"></a>tflite::Register_FLOOR_DIV()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_FLOOR_DIV()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[378]"></a>tflite::Register_FLOOR_MOD()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_FLOOR_MOD()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[37b]"></a>tflite::Register_GATHER_ND()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gather_nd.o(.text._ZN6tflite18Register_GATHER_NDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_GATHER_ND()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39c]"></a>tflite::Register_SELECT_V2()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, select.o(.text._ZN6tflite18Register_SELECT_V2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SELECT_V2()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3ab]"></a>tflite::Register_TRANSPOSE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_TRANSPOSE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2d7]"></a>tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</STRONG> (Thumb, 604 bytes, Stack size 80 bytes, conv_common.o(.text._ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1f1]"></a>tflite::GreedyMemoryPlanner::GetBufferCount()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1f4]"></a>tflite::GreedyMemoryPlanner::PrintMemoryPlan()</STRONG> (Thumb, 736 bytes, Stack size 216 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tflite::GreedyMemoryPlanner::PrintMemoryPlan() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1f2]"></a>tflite::GreedyMemoryPlanner::GetOffsetForBuffer(tflite::ErrorReporter*, int, int*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tflite::GreedyMemoryPlanner::GetOffsetForBuffer(tflite::ErrorReporter*, int, int*) &rArr; tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1f0]"></a>tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tflite::GreedyMemoryPlanner::GetMaximumMemorySize() &rArr; tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[3e5]"></a>tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()</STRONG> (Thumb, 638 bytes, Stack size 48 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(tflite::ErrorReporter*, int, int*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetMaximumMemorySize()
</UL>

<P><STRONG><a name="[1f3]"></a>tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::GreedyMemoryPlanner::Init(unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1ee]"></a>tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1ef]"></a>tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::GreedyMemoryPlanner::AddBuffer(tflite::ErrorReporter*, int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[3c5]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)
</UL>

<P><STRONG><a name="[480]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[481]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev), UNUSED)

<P><STRONG><a name="[1ec]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[2d5]"></a>tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 86 bytes, Stack size 112 bytes, pooling_common.o(.text._ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[a1]"></a>tflite::ParseAssignVariable(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite19ParseAssignVariableEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a3]"></a>tflite::ParseBatchToSpaceNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite19ParseBatchToSpaceNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b9]"></a>tflite::ParseFullyConnected(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::ParseFullyConnected(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d9]"></a>tflite::ParseResizeBilinear(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite19ParseResizeBilinearEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseResizeBilinear(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e2]"></a>tflite::ParseSpaceToBatchNd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite19ParseSpaceToBatchNdEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[371]"></a>tflite::Register_DEQUANTIZE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_DEQUANTIZE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[37e]"></a>tflite::Register_HARD_SWISH()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_HARD_SWISH()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[380]"></a>tflite::Register_L2_POOL_2D()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, l2_pool_2d.o(.text._ZN6tflite19Register_L2_POOL_2DEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_L2_POOL_2D()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[381]"></a>tflite::Register_LEAKY_RELU()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, leaky_relu.o(.text._ZN6tflite19Register_LEAKY_RELUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_LEAKY_RELU()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[387]"></a>tflite::Register_LOGICAL_OR()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, logical.o(.text._ZN6tflite19Register_LOGICAL_OREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_LOGICAL_OR()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38c]"></a>tflite::Register_MIRROR_PAD()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_MIRROR_PAD()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[395]"></a>tflite::Register_REDUCE_MAX()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_REDUCE_MAX()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3ae]"></a>tflite::Register_VAR_HANDLE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_VAR_HANDLE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3b0]"></a>tflite::Register_ZEROS_LIKE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, zeros_like.o(.text._ZN6tflite19Register_ZEROS_LIKEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_ZEROS_LIKE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[1cd]"></a>tflite::BuiltinDataAllocator::~BuiltinDataAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite20BuiltinDataAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[3e6]"></a>tflite::CalculateInputRadius(int, int, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, quantization_util.o(.text._ZN6tflite20CalculateInputRadiusEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::CalculateInputRadius(int, int, int) &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[24d]"></a>tflite::NumSubgraphOperators(tflite::Model const*, int)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::NumSubgraphOperators(tflite::Model const*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InvokeSubgraph(int)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::FreeSubgraphs()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::PrepareSubgraphs()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::InitSubgraphs()
</UL>

<P><STRONG><a name="[3c1]"></a>tflite::NumSubgraphOperators(tflite::SubGraph const*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[ae]"></a>tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c0]"></a>tflite::ParseL2Normalization(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseL2Normalization(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[375]"></a>tflite::Register_EXPAND_DIMS()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, expand_dims.o(.text._ZN6tflite20Register_EXPAND_DIMSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_EXPAND_DIMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[385]"></a>tflite::Register_LOGICAL_AND()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, logical.o(.text._ZN6tflite20Register_LOGICAL_ANDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_LOGICAL_AND()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[389]"></a>tflite::Register_MAX_POOL_2D()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_MAX_POOL_2D()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3e8]"></a>tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[3be]"></a>tflite::AllocationInfoBuilder::FreeAllocationInfo()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::AllocationInfoBuilder::FreeAllocationInfo()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[3b8]"></a>tflite::AllocationInfoBuilder::CreateAllocationInfo(int)</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::CreateAllocationInfo(int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[3bc]"></a>tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 892 bytes, Stack size 88 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr;  tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[3b9]"></a>tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[3ba]"></a>tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKiPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[3e9]"></a>tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr;  tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[15a]"></a>tflite::CircularBufferPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, circular_buffer_common.o(.text._ZN6tflite21CircularBufferPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::CircularBufferPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv)
</UL>
<P><STRONG><a name="[3eb]"></a>tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 426 bytes, Stack size 240 bytes, mul_common.o(.text._ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingExtendedShapeFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[11b]"></a>tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2852 bytes, Stack size 128 bytes, quantize_common.o(.text._ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Requantize&lang;signed char, unsigned char&rang;(signed char const*, int, int, int, int, int, unsigned char*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Requantize&lang;unsigned char, signed char&rang;(unsigned char const*, int, int, int, int, int, signed char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[3fe]"></a>tflite::GetMicroErrorReporter()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite21GetMicroErrorReporterEv))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)
</UL>

<P><STRONG><a name="[10d]"></a>tflite::MicroContextGetTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
</UL>
<P><STRONG><a name="[367]"></a>tflite::Register_BROADCAST_TO()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, broadcast_to.o(.text._ZN6tflite21Register_BROADCAST_TOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_BROADCAST_TO()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2cb]"></a>tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*)</STRONG> (Thumb, 1352 bytes, Stack size 168 bytes, transpose_conv.o(.text._ZN6tflite21reference_integer_ops13TransposeConvERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_PaS8_SB_Pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ca]"></a>void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*)</STRONG> (Thumb, 1540 bytes, Stack size 216 bytes, transpose_conv.o(.text._ZN6tflite21reference_integer_ops13TransposeConvIxEEvRKNS_10ConvParamsEPKiS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_PsS9_PaPSE_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3ed]"></a>tflite::reference_integer_ops::L2Normalization(int, int, int, signed char const*, signed char*)</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, l2norm.o(.text._ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::L2Normalization(int, int, int, signed char const*, signed char*) &rArr; tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[282]"></a>void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 812 bytes, Stack size 288 bytes, mul_common.o(.text._ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[8a]"></a>tflite::reference_integer_ops::CheckArithmeticParams(tflite::ArithmeticParams const&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, add.o(.text._ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::CheckArithmeticParams(tflite::ArithmeticParams const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_)
<LI> squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[293]"></a>tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))</STRONG> (Thumb, 444 bytes, Stack size 184 bytes, add.o(.text._ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3ef]"></a>void tflite::reference_integer_ops::Mul&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, mul_common.o(.text._ZN6tflite21reference_integer_ops3MulIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_integer_ops::Mul&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[3b2]"></a>void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int)</STRONG> (Thumb, 724 bytes, Stack size 152 bytes, reduce_common.o(.text._ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEiiRKNS_12RuntimeShapeEPKT_iS7_PS8_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_integer_ops::Mean&lang;signed char&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, signed char const*, int, tflite::RuntimeShape const&, signed char*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[3b3]"></a>void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int)</STRONG> (Thumb, 740 bytes, Stack size 160 bytes, reduce_common.o(.text._ZN6tflite21reference_integer_ops4MeanIsEEvRKNS_10MeanParamsEiiRKNS_12RuntimeShapeEPKT_iS7_PS8_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_integer_ops::Mean&lang;short&rang;(tflite::MeanParams const&, int, int, tflite::RuntimeShape const&, short const*, int, tflite::RuntimeShape const&, short*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[3f0]"></a>tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, tanh.o(.text._ZN6tflite21reference_integer_ops4TanhEiiiiRKNS_12RuntimeShapeEPKaS3_Pa))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 5&rang;(gemmlowp::FixedPoint&lang;int, 5&rang;)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_minus_x_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[8b]"></a>tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, add.o(.text._ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_)
</UL>
<P><STRONG><a name="[27e]"></a>tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*)</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, logistic.o(.text._ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 4&rang;(gemmlowp::FixedPoint&lang;int, 4&rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3f4]"></a>tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*)</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, memory_helpers.o(.text._ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[2e0]"></a>tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)</STRONG> (Thumb, 1616 bytes, Stack size 200 bytes, softmax_common.o(.text._ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) &rArr; tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2e5]"></a>tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)</STRONG> (Thumb, 2396 bytes, Stack size 128 bytes, svdf_common.o(.text._ZN6tflite22EvalFloatSvdfReferenceEP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensorS6_S6_S6_PK16TfLiteSVDFParamsiPS4_SA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[35f]"></a>tflite::MicroMutableOpResolver&lang;128u&rang;::AddBuiltin(tflite::BuiltinOperator, TfLiteRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, all_ops_resolver.o(.text._ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tflite::MicroMutableOpResolver&lang;128u&rang;::AddBuiltin(tflite::BuiltinOperator, TfLiteRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[374]"></a>tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, all_ops_resolver.o(.text._ZN6tflite22MicroMutableOpResolverILj128EE9AddEthosUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tflite::MicroMutableOpResolver&lang;128u&rang;::AddEthosU() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetString_ETHOSU()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ETHOSU()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2e3]"></a>tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables19CreateIdIfNoneFoundEPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2bc]"></a>tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables4ReadEiPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalTensorBytes(TfLiteEvalTensor const*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2a7]"></a>tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables6AssignEiPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalTensorBytes(TfLiteEvalTensor const*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2d6]"></a>tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables8AllocateEiP13TfLiteContextPK12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[250]"></a>tflite::MicroResourceVariables::ResetAll()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables8ResetAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tflite::MicroResourceVariables::ResetAll()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::ResetVariableTensors()
</UL>

<P><STRONG><a name="[e8]"></a>tflite::ParseSquaredDifference(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite22ParseSquaredDifferenceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[3de]"></a>tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, reduce_common.o(.text._ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareMeanOrSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareSimple(TfLiteContext*, TfLiteNode*, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareMeanOrSum(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[394]"></a>tflite::Register_READ_VARIABLE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, read_variable.o(.text._ZN6tflite22Register_READ_VARIABLEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_READ_VARIABLE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[276]"></a>tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 86 bytes, Stack size 112 bytes, pooling_common.o(.text._ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; tflite::reference_ops::AveragePool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AveragePool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[366]"></a>tflite::Register_BROADCAST_ARGS()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, broadcast_args.o(.text._ZN6tflite23Register_BROADCAST_ARGSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_BROADCAST_ARGS()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[36f]"></a>tflite::Register_DEPTH_TO_SPACE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, depth_to_space.o(.text._ZN6tflite23Register_DEPTH_TO_SPACEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_DEPTH_TO_SPACE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a2]"></a>tflite::Register_SPACE_TO_DEPTH()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, space_to_depth.o(.text._ZN6tflite23Register_SPACE_TO_DEPTHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SPACE_TO_DEPTH()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3ac]"></a>tflite::Register_TRANSPOSE_CONV()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_TRANSPOSE_CONV()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3cc]"></a>tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, leaky_relu_common.o(.text._ZN6tflite24CalculateOpDataLeakyReluEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataLeakyRelu(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ac]"></a>tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, depthwise_conv_common.o(.text._ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RuntimePaddingType(TfLitePadding)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[11a]"></a>tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, quantize_common.o(.text._ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[3f5]"></a>tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, quantization_util.o(.text._ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
</UL>

<P><STRONG><a name="[363]"></a>tflite::Register_ASSIGN_VARIABLE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, assign_variable.o(.text._ZN6tflite24Register_ASSIGN_VARIABLEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_ASSIGN_VARIABLE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[364]"></a>tflite::Register_AVERAGE_POOL_2D()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_AVERAGE_POOL_2D()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[36a]"></a>tflite::Register_CIRCULAR_BUFFER()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, circular_buffer.o(.text._ZN6tflite24Register_CIRCULAR_BUFFEREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Register_CIRCULAR_BUFFER() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[379]"></a>tflite::Register_FULLY_CONNECTED()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_FULLY_CONNECTED()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[398]"></a>tflite::Register_RESIZE_BILINEAR()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, resize_bilinear.o(.text._ZN6tflite24Register_RESIZE_BILINEAREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_RESIZE_BILINEAR()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3fc]"></a>tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 598 bytes, Stack size 264 bytes, prelu_common.o(.text._ZN6tflite25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS2_S4_S2_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2e8]"></a>tflite::ComputePaddingHeightWidth(int, int, int, int, int, int, int, int, TfLitePadding, int*, int*)</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, l2_pool_2d.o(.text._ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tflite::ComputePaddingHeightWidth(int, int, int, int, int, int, int, int, TfLitePadding, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3fd]"></a>tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 590 bytes, Stack size 232 bytes, mul_common.o(.text._ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingExtendedShapeFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::Mul&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ae]"></a>tflite::FullyConnectedParamsFloat(TfLiteFusedActivation)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fully_connected_common.o(.text._ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3d4]"></a>tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::OpResolver const&, tflite::ErrorReporter*, TfLiteRegistration const**)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, op_resolver.o(.text._ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::OpResolver const&, tflite::ErrorReporter*, TfLiteRegistration const**) &rArr; tflite::GetBuiltinCode(tflite::OperatorCode const*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[10c]"></a>tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
</UL>
<P><STRONG><a name="[10b]"></a>tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetMicroErrorReporter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE)
</UL>
<P><STRONG><a name="[da]"></a>tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[365]"></a>tflite::Register_BATCH_TO_SPACE_ND()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, batch_to_space_nd.o(.text._ZN6tflite26Register_BATCH_TO_SPACE_NDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_BATCH_TO_SPACE_ND()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[370]"></a>tflite::Register_DEPTHWISE_CONV_2D()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_DEPTHWISE_CONV_2D()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a1]"></a>tflite::Register_SPACE_TO_BATCH_ND()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SPACE_TO_BATCH_ND()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[1f7]"></a>tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1fc]"></a>tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1f8]"></a>tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1f9]"></a>tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tflite::SingleArenaBufferAllocator::IsAllTempDeallocated() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1fa]"></a>tflite::SingleArenaBufferAllocator::ResetTempAllocations()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResetTempAllocations() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1fb]"></a>tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[202]"></a>tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1fd]"></a>tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1ff]"></a>tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[3c4]"></a>tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::Create(tflite::ErrorReporter*, unsigned char*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::ErrorReporter*)
</UL>

<P><STRONG><a name="[1f6]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[482]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev), UNUSED)

<P><STRONG><a name="[1f5]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[24f]"></a>tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, memory_helpers.o(.text._ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroGraph::ResetVariableTensors()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[3a7]"></a>tflite::Register_SQUARED_DIFFERENCE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::Register_SQUARED_DIFFERENCE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[2da]"></a>tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, depthwise_conv_common.o(.text._ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[10a]"></a>tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
</UL>
<P><STRONG><a name="[2dc]"></a>tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, fully_connected_common.o(.text._ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3ec]"></a>tflite::MatchingExtendedShapeFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&)</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, mul_common.o(.text._ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tflite::MatchingExtendedShapeFlatSize(tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[109]"></a>tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
</UL>
<P><STRONG><a name="[372]"></a>tflite::Register_DETECTION_POSTPROCESS()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Register_DETECTION_POSTPROCESS() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3cb]"></a>tflite::DownScaleInt32ToInt16Multiplier(int, short*)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hard_swish_common.o(.text._ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::DownScaleInt32ToInt16Multiplier(int, short*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HardSwishPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3ee]"></a>tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*)</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, portable_tensor_utils.o(.text._ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::L2Normalization(int, int, int, signed char const*, signed char*)
</UL>

<P><STRONG><a name="[400]"></a>tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, kernel_util.o(.text._ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)
</UL>

<P><STRONG><a name="[3f9]"></a>tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, quantization_util.o(.text._ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*)
</UL>

<P><STRONG><a name="[255]"></a>tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, kernel_util.o(.text._ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataMul(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*)
</UL>

<P><STRONG><a name="[3c9]"></a>tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)</STRONG> (Thumb, 936 bytes, Stack size 56 bytes, logistic_common.o(.text._ZN6tflite33CalculateArithmeticOpDataLogisticEP13TfLiteContextP10TfLiteNodePNS_14OpDataLogisticE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*) &rArr; tflite::CalculateInputRadius(int, int, int) &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CheckedLog2(float, int*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogisticPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[416]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[3d5]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEE))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[316]"></a>void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*)</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, add.o(.text._ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastMul4DSlow&lang;int&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool))
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
</UL>

<P><STRONG><a name="[30f]"></a>void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*)</STRONG> (Thumb, 482 bytes, Stack size 88 bytes, div.o(.text._ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
</UL>

<P><STRONG><a name="[254]"></a>tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, quantization_util.o(.text._ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataSub(TfLiteContext*, TfLiteSubParams*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataSub*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[107]"></a>tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
</UL>
<P><STRONG><a name="[2e2]"></a>tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)</STRONG> (Thumb, 800 bytes, Stack size 96 bytes, kernel_util.o(.text._ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[108]"></a>tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_runner.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv)
</UL>
<P><STRONG><a name="[183]"></a>tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 980 bytes, Stack size 240 bytes, tanh.o(.text._ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
</UL>
<P><STRONG><a name="[196]"></a>tflite::ops::micro::arg_min_max::ArgMaxEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arg_min_max.o(.text._ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::arg_min_max::ArgMaxEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MAXEv)
</UL>
<P><STRONG><a name="[197]"></a>tflite::ops::micro::arg_min_max::ArgMinEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arg_min_max.o(.text._ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::arg_min_max::ArgMinEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MINEv)
</UL>
<P><STRONG><a name="[401]"></a>tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, arg_min_max.o(.text._ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Less&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Less const&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;signed char, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, signed char const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ArgMinMax&lang;float, int, int, tflite::ops::micro::Greater&rang;(tflite::RuntimeShape const&, float const*, int const*, tflite::RuntimeShape const&, int*, tflite::ops::micro::Greater const&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::ArgMaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::ArgMinEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[17c]"></a>tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons4InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 6]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
</UL>
<P><STRONG><a name="[17d]"></a>tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 6]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
<LI> comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
</UL>
<P><STRONG><a name="[35e]"></a>tflite::ops::micro::Register_ABS()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_ABS()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[36d]"></a>tflite::ops::micro::Register_COS()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro12Register_COSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_COS()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[384]"></a>tflite::ops::micro::Register_LOG()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro12Register_LOGEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_LOG()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38d]"></a>tflite::ops::micro::Register_NEG()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, neg.o(.text._ZN6tflite3ops5micro12Register_NEGEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_NEG()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[390]"></a>tflite::ops::micro::Register_PAD()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pad.o(.text._ZN6tflite3ops5micro12Register_PADEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_PAD()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39e]"></a>tflite::ops::micro::Register_SIN()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro12Register_SINEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_SIN()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[369]"></a>tflite::ops::micro::Register_CEIL()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ceil.o(.text._ZN6tflite3ops5micro13Register_CEILEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_CEIL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[382]"></a>tflite::ops::micro::Register_LESS()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_LESS()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38f]"></a>tflite::ops::micro::Register_PACK()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pack.o(.text._ZN6tflite3ops5micro13Register_PACKEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_PACK()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a5]"></a>tflite::ops::micro::Register_SQRT()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro13Register_SQRTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_SQRT()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3aa]"></a>tflite::ops::micro::Register_TANH()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_TANH()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[404]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[405]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;bool&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, bool const* const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[406]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;float&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, float const* const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[407]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;int&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, int const* const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[408]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;short&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, short const* const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[409]"></a>void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 384 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Concatenation&lang;long long&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, long long const* const*, tflite::RuntimeShape const&, long long*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1a5]"></a>tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::Concatenation&lang;signed char&rang;(tflite::ConcatenationParams const&, tflite::RuntimeShape const* const*, signed char const* const*, tflite::RuntimeShape const&, signed char*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[1a3]"></a>tflite::ops::micro::concatenation::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation4InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::concatenation::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[1a4]"></a>tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 748 bytes, Stack size 64 bytes, concatenation.o(.text._ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::concatenation::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[40a]"></a>tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*)</STRONG> (Thumb, 620 bytes, Stack size 192 bytes, strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1a9]"></a>tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;signed char&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;short&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;bool&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;bool&rang;*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;int&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::StridedSlice&lang;float&rang;(tflite::StridedSliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
</UL>
<P><STRONG><a name="[1a7]"></a>tflite::ops::micro::strided_slice::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice4InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::strided_slice::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
</UL>
<P><STRONG><a name="[1a8]"></a>tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 436 bytes, Stack size 176 bytes, strided_slice.o(.text._ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::strided_slice::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::CheckOutputSize(TfLiteContext*, tflite::ops::micro::strided_slice::StridedSliceContext*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv)
</UL>
<P><STRONG><a name="[373]"></a>tflite::ops::micro::Register_EQUAL()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_EQUAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[376]"></a>tflite::ops::micro::Register_FLOOR()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, floor.o(.text._ZN6tflite3ops5micro14Register_FLOOREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_FLOOR()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[391]"></a>tflite::ops::micro::Register_PADV2()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_PADV2()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39a]"></a>tflite::ops::micro::Register_ROUND()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, round.o(.text._ZN6tflite3ops5micro14Register_ROUNDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_ROUND()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[39b]"></a>tflite::ops::micro::Register_RSQRT()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_RSQRT()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a3]"></a>tflite::ops::micro::Register_SPLIT()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, split.o(.text._ZN6tflite3ops5micro14Register_SPLITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_SPLIT()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a6]"></a>tflite::ops::micro::Register_SQUARE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro15Register_SQUAREEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_SQUARE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3ad]"></a>tflite::ops::micro::Register_UNPACK()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, unpack.o(.text._ZN6tflite3ops5micro15Register_UNPACKEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_UNPACK()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[361]"></a>tflite::ops::micro::Register_ARG_MAX()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MAXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_ARG_MAX()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[362]"></a>tflite::ops::micro::Register_ARG_MIN()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, arg_min_max.o(.text._ZN6tflite3ops5micro16Register_ARG_MINEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_ARG_MIN()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[37c]"></a>tflite::ops::micro::Register_GREATER()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_GREATER()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38a]"></a>tflite::ops::micro::Register_MAXIMUM()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MAXIMUMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_MAXIMUM()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38b]"></a>tflite::ops::micro::Register_MINIMUM()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MINIMUMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_MINIMUM()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[397]"></a>tflite::ops::micro::Register_RESHAPE()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, reshape.o(.text._ZN6tflite3ops5micro16Register_RESHAPEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_RESHAPE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a4]"></a>tflite::ops::micro::Register_SPLIT_V()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, split_v.o(.text._ZN6tflite3ops5micro16Register_SPLIT_VEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_SPLIT_V()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[38e]"></a>tflite::ops::micro::Register_NOT_EQUAL()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_NOT_EQUAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[383]"></a>tflite::ops::micro::Register_LESS_EQUAL()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_LESS_EQUAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[386]"></a>tflite::ops::micro::Register_LOGICAL_NOT()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, elementwise.o(.text._ZN6tflite3ops5micro20Register_LOGICAL_NOTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_LOGICAL_NOT()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[36b]"></a>tflite::ops::micro::Register_CONCATENATION()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, concatenation.o(.text._ZN6tflite3ops5micro22Register_CONCATENATIONEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_CONCATENATION()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[37d]"></a>tflite::ops::micro::Register_GREATER_EQUAL()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_GREATER_EQUAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[3a9]"></a>tflite::ops::micro::Register_STRIDED_SLICE()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, strided_slice.o(.text._ZN6tflite3ops5micro22Register_STRIDED_SLICEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_STRIDED_SLICE()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[1ae]"></a>tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 296 bytes, Stack size 120 bytes, resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;signed char&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;short&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeNearestNeighbor&lang;int&rang;(tflite::ResizeNearestNeighborParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv)
</UL>
<P><STRONG><a name="[1ad]"></a>tflite::ops::micro::resize_nearest_neighbor::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tflite::ops::micro::resize_nearest_neighbor::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv)
</UL>
<P><STRONG><a name="[37f]"></a>tflite::ops::micro::Register_L2_NORMALIZATION()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_L2_NORMALIZATION()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[399]"></a>tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, resize_nearest_neighbor.o(.text._ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
</UL>

<P><STRONG><a name="[175]"></a>tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, neg.o(.text._ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> neg.o(.text._ZN6tflite3ops5micro12Register_NEGEv)
</UL>
<P><STRONG><a name="[178]"></a>tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 372 bytes, Stack size 88 bytes, pad.o(.text._ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;int, int&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, int const*, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
<LI> pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
</UL>
<P><STRONG><a name="[176]"></a>tflite::ops::micro::pad::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pad.o(.text._ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::pad::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
<LI> pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
</UL>
<P><STRONG><a name="[177]"></a>tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2084 bytes, Stack size 128 bytes, pad.o(.text._ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::pad::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pad.o(.text._ZN6tflite3ops5micro12Register_PADEv)
<LI> pad.o(.text._ZN6tflite3ops5micro14Register_PADV2Ev)
</UL>
<P><STRONG><a name="[17b]"></a>tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, ceil.o(.text._ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceil.o(.text._ZN6tflite3ops5micro13Register_CEILEv)
</UL>
<P><STRONG><a name="[17a]"></a>tflite::ops::micro::ceil::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, ceil.o(.text._ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::ops::micro::ceil::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceil.o(.text._ZN6tflite3ops5micro13Register_CEILEv)
</UL>
<P><STRONG><a name="[185]"></a>tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, floor.o(.text._ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor.o(.text._ZN6tflite3ops5micro14Register_FLOOREv)
</UL>
<P><STRONG><a name="[187]"></a>tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 416 bytes, Stack size 104 bytes, round.o(.text._ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> round.o(.text._ZN6tflite3ops5micro14Register_ROUNDEv)
</UL>
<P><STRONG><a name="[186]"></a>tflite::ops::micro::round::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, round.o(.text._ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::ops::micro::round::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> round.o(.text._ZN6tflite3ops5micro14Register_ROUNDEv)
</UL>
<P><STRONG><a name="[18b]"></a>tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, split.o(.text._ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> split.o(.text._ZN6tflite3ops5micro14Register_SPLITEv)
</UL>
<P><STRONG><a name="[18a]"></a>tflite::ops::micro::split::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, split.o(.text._ZN6tflite3ops5micro5split7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::ops::micro::split::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> split.o(.text._ZN6tflite3ops5micro14Register_SPLITEv)
</UL>
<P><STRONG><a name="[40e]"></a>TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 622 bytes, Stack size 64 bytes, split.o(.text._ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[40b]"></a>TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, split.o(.text._ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[40c]"></a>TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, split.o(.text._ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[40d]"></a>TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, split.o(.text._ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1ac]"></a>tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, l2norm.o(.text._ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::L2Normalization(int, int, int, signed char const*, signed char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Normalization(tflite::L2NormalizationParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
</UL>
<P><STRONG><a name="[1aa]"></a>tflite::ops::micro::l2norm::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2norm.o(.text._ZN6tflite3ops5micro6l2norm4InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::l2norm::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
</UL>
<P><STRONG><a name="[1ab]"></a>tflite::ops::micro::l2norm::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, l2norm.o(.text._ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::l2norm::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2norm.o(.text._ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv)
</UL>
<P><STRONG><a name="[40f]"></a>tflite::ops::micro::reshape::ReshapeOutput(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 632 bytes, Stack size 64 bytes, reshape.o(.text._ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tflite::ops::micro::reshape::ReshapeOutput(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[19c]"></a>tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, reshape.o(.text._ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reshape.o(.text._ZN6tflite3ops5micro16Register_RESHAPEEv)
</UL>
<P><STRONG><a name="[19b]"></a>tflite::ops::micro::reshape::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, reshape.o(.text._ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tflite::ops::micro::reshape::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::ops::micro::reshape::ReshapeOutput(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::ReshapeOutput(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reshape.o(.text._ZN6tflite3ops5micro16Register_RESHAPEEv)
</UL>
<P><STRONG><a name="[19e]"></a>tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> split_v.o(.text._ZN6tflite3ops5micro16Register_SPLIT_VEv)
</UL>
<P><STRONG><a name="[19d]"></a>tflite::ops::micro::split_v::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v7PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::ops::micro::split_v::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> split_v.o(.text._ZN6tflite3ops5micro16Register_SPLIT_VEv)
</UL>
<P><STRONG><a name="[413]"></a>TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 750 bytes, Stack size 72 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[410]"></a>TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 766 bytes, Stack size 72 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[411]"></a>TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 766 bytes, Stack size 72 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[412]"></a>TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)</STRONG> (Thumb, 766 bytes, Stack size 72 bytes, split_v.o(.text._ZN6tflite3ops5micro7split_v9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensori))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[81]"></a>tflite::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, mul.o(.text._ZN6tflite4EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tflite::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mul.o(.text._ZN6tflite12Register_MULEv)
</UL>
<P><STRONG><a name="[268]"></a>tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*))</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, kernel_util_1.o(.text._ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ZEROS_LIKE()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_WHILE()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_VAR_HANDLE()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_UNPACK()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE_CONV()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_TANH()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SVDF()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SUM()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SUB()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_STRIDED_SLICE()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SQUEEZE()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SQUARED_DIFFERENCE()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SQUARE()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SQRT()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SPLIT_V()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SPLIT()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SPACE_TO_DEPTH()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SPACE_TO_BATCH_ND()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SOFTMAX()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SLICE()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_SIN()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SHAPE()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SELECT_V2()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RSQRT()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ROUND()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RESIZE_BILINEAR()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_RESHAPE()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RELU6()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RELU()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_REDUCE_MAX()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_READ_VARIABLE()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_QUANTIZE()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_PRELU()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PADV2()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PAD()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_PACK()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_NOT_EQUAL()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_NEG()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MUL()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MIRROR_PAD()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_MINIMUM()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MEAN()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_MAXIMUM()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MAX_POOL_2D()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGISTIC()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGICAL_OR()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LOGICAL_NOT()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LOGICAL_AND()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LOG()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LESS_EQUAL()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_LESS()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_LEAKY_RELU()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_L2_POOL_2D()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_L2_NORMALIZATION()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_IF()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_HARD_SWISH()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_GREATER_EQUAL()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_GREATER()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_GATHER_ND()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_GATHER()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FULLY_CONNECTED()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FLOOR_MOD()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FLOOR_DIV()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_FLOOR()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_FILL()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_EXPAND_DIMS()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_EXP()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_EQUAL()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ELU()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DIV()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DETECTION_POSTPROCESS()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEQUANTIZE()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTHWISE_CONV_2D()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTH_TO_SPACE()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CUMSUM()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_COS()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONV_2D()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_CONCATENATION()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CIRCULAR_BUFFER()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_CEIL()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CAST()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CALL_ONCE()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BROADCAST_TO()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BROADCAST_ARGS()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_BATCH_TO_SPACE_ND()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_AVERAGE_POOL_2D()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ASSIGN_VARIABLE()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ARG_MIN()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ARG_MAX()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD_N()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::Register_ABS()
</UL>

<P><STRONG><a name="[260]"></a>tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kernel_util_1.o(.text._ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split_v::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::split::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[261]"></a>tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kernel_util_1.o(.text._ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::concatenation::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split_v::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;signed char&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;short&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;int&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::split::SplitImpl&lang;float&rang;(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, int)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::reshape::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[263]"></a>tflite::micro::GetTensorShape(TfLiteEvalTensor const*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kernel_util_1.o(.text._ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::arg_min_max::Eval(TfLiteContext*, TfLiteNode*, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;int&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::ops::micro::concatenation::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulQuantizedReference(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMulFloatReference(TfLiteContext*, TfLiteNode*, TfLiteMulParams*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::ceil::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::pad::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::neg::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;short&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::QuantizeLeakyRelu&lang;signed char&rang;(tflite::LeakyReluOpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LeakyReluEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::l2norm::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::floor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::strided_slice::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::round::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::resize_nearest_neighbor::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>

<P><STRONG><a name="[262]"></a>tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kernel_util_1.o(.text._ZN6tflite5micro14HaveSameShapesEPK16TfLiteEvalTensorS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayEqual
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3c6]"></a>tflite::micro::RuntimePaddingType(TfLitePadding)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kernel_util_1.o(.text._ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)
</UL>

<P><STRONG><a name="[2e4]"></a>tflite::micro::GetMutableEvalInput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kernel_util_1.o(.text._ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::micro::GetMutableEvalInput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2cc]"></a>tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, kernel_util_1.o(.text._ZN6tflite5micro23CopyOpInputsToOpOutputsEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2ba]"></a>tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, kernel_util_1.o(.text._ZN6tflite5micro28CopyOpInputsToSubgraphInputsEP13TfLiteContextP10TfLiteNodePNS_10MicroGraphEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2cd]"></a>tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, kernel_util_1.o(.text._ZN6tflite5micro29CopyOpOutputsToSubgraphInputsEP13TfLiteContextP10TfLiteNodePNS_10MicroGraphEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2bb]"></a>tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, kernel_util_1.o(.text._ZN6tflite5micro30CopySubgraphOutputsToOpOutputsEP13TfLiteContextP10TfLiteNodePNS_10MicroGraphEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2e1]"></a>tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, kernel_util_1.o(.text._ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayGetSizeInBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[352]"></a>tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, slice.o(.text._ZN6tflite6OffsetERKNS_12RuntimeShapeEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Offset(tflite::RuntimeShape const&, int, int, int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
</UL>

<P><STRONG><a name="[76]"></a>tflite::EvalAdd(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 592 bytes, Stack size 240 bytes, add.o(.text._ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = tflite::EvalAdd(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;!(is_small_integer&lang;float&rang;::value), void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;float&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[13c]"></a>tflite::EvalMax(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite7EvalMaxEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMax(TfLiteContext*, TfLiteNode*) &rArr; tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMaxHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reduce.o(.text._ZN6tflite19Register_REDUCE_MAXEv)
</UL>
<P><STRONG><a name="[415]"></a>tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 568 bytes, Stack size 240 bytes, sub.o(.text._ZN6tflite7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS_9OpDataSubEPK16TfLiteEvalTensorSB_PS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;5&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;5&rang;*, tflite::NdArrayDesc&lang;5&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastSubSlow&lang;5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[87]"></a>tflite::EvalSum(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite7EvalSumEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tflite::EvalSum(TfLiteContext*, TfLiteNode*) &rArr; tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSumHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reduce.o(.text._ZN6tflite12Register_SUMEv)
</UL>
<P><STRONG><a name="[74]"></a>tflite::InitAdd(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, add.o(.text._ZN6tflite7InitAddEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::InitAdd(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[7f]"></a>tflite::MulInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mul_common.o(.text._ZN6tflite7MulInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::MulInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mul.o(.text._ZN6tflite12Register_MULEv)
</UL>
<P><STRONG><a name="[bf]"></a>tflite::ParseIf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite7ParseIfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseIf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[84]"></a>tflite::SubEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, sub.o(.text._ZN6tflite7SubEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tflite::SubEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSubQuantized(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalSub(TfLiteContext*, TfLiteNode*, TfLiteSubParams*, tflite::OpDataSub const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub.o(.text._ZN6tflite12Register_SUBEv)
</UL>
<P><STRONG><a name="[82]"></a>tflite::SubInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sub.o(.text._ZN6tflite7SubInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::SubInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub.o(.text._ZN6tflite12Register_SUBEv)
</UL>
<P><STRONG><a name="[95]"></a>tflite::EvalMean(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reduce.o(.text._ZN6tflite8EvalMeanEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tflite::EvalMean(TfLiteContext*, TfLiteNode*) &rArr; tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*) &rArr; void tflite::reference_ops::Mean&lang;float&rang;(tflite::MeanParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalMeanHelper(TfLiteContext*, TfLiteNode*, tflite::OpDataReduce*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reduce.o(.text._ZN6tflite13Register_MEANEv)
</UL>
<P><STRONG><a name="[9c]"></a>tflite::ParseAbs(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseAbsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[9d]"></a>tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ab]"></a>tflite::ParseCos(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseCosEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b0]"></a>tflite::ParseDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseDivEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseDiv(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b1]"></a>tflite::ParseElu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseEluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b3]"></a>tflite::ParseExp(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseExpEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c4]"></a>tflite::ParseLog(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseLogEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[cd]"></a>tflite::ParseMul(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseMul(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ce]"></a>tflite::ParseNeg(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseNegEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d1]"></a>tflite::ParsePad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[df]"></a>tflite::ParseSin(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseSinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[eb]"></a>tflite::ParseSub(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSub(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[3c2]"></a>tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*)</STRONG> (Thumb, 752 bytes, Stack size 56 bytes, micro_allocator.o(.text._ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteTensor*) &rArr; tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float&rang; const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int&rang; const*)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayGetSizeInBytes
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*, tflite::ErrorReporter*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
</UL>

<P><STRONG><a name="[3c0]"></a>tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, micro_allocator.o(.text._ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang; &rang; const*, tflite::ErrorReporter*, TfLiteEvalTensor*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int&rang; const*)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[88]"></a>tflite::LogicalOr(bool, bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logical_common.o(.text._ZN6tflite9LogicalOrEbb))
<BR>[Address Reference Count : 1]<UL><LI> logical.o(.text._ZN6tflite12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[9e]"></a>tflite::ParseAddN(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseAddNEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a7]"></a>tflite::ParseCast(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseCastEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::ParseCast(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a8]"></a>tflite::ParseCeil(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseCeilEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[b5]"></a>tflite::ParseFill(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseFillEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[c2]"></a>tflite::ParseLess(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseLessEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d0]"></a>tflite::ParsePack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParsePack(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[a2]"></a>tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[d6]"></a>tflite::ParseRelu(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[e6]"></a>tflite::ParseSqrt(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseSqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ec]"></a>tflite::ParseSvdf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ParseSvdf(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[ed]"></a>tflite::ParseTanh(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParseTanhEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.text._ZN6tflite14AllOpsResolverC2Ev)
</UL>
<P><STRONG><a name="[f8]"></a>tflite::PreluEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 204 bytes, Stack size 112 bytes, prelu.o(.text._ZN6tflite9PreluEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::PreluEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastPrelu4DSlow&lang;signed char&rang;(tflite::PreluParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BroadcastPrelu4DSlowFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prelu.o(.text._ZN6tflite14Register_PRELUEv)
</UL>
<P><STRONG><a name="[f6]"></a>tflite::PreluInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prelu.o(.text._ZN6tflite9PreluInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::PreluInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prelu.o(.text._ZN6tflite14Register_PRELUEv)
</UL>
<P><STRONG><a name="[2e6]"></a>tflite::ReluFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, activations_common.o(.text._ZN6tflite9ReluFloatERKNS_12RuntimeShapeEPKfS2_Pf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::ReluFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3f3]"></a>gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 4&rang;(gemmlowp::FixedPoint&lang;int, 4&rang;)</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, logistic.o(.text._ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 4&rang;(gemmlowp::FixedPoint&lang;int, 4&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*)
</UL>

<P><STRONG><a name="[3f1]"></a>gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 5&rang;(gemmlowp::FixedPoint&lang;int, 5&rang;)</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, log_softmax.o(.text._ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::exp_on_negative_values&lang;int, 5&rang;(gemmlowp::FixedPoint&lang;int, 5&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[30a]"></a>gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, div.o(.text._ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*)
</UL>

<P><STRONG><a name="[3f2]"></a>gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_minus_x_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)</STRONG> (Thumb, 698 bytes, Stack size 32 bytes, tanh.o(.text._ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_minus_x_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Tanh(int, int, int, int, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[2cf]"></a>flexbuffers::Map::operator[](char const*) const</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, detection_postprocess.o(.text._ZNK11flexbuffers3MapixEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = flexbuffers::Map::operator[](char const*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[2d0]"></a>flexbuffers::Reference::AsInt64() const</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, detection_postprocess.o(.text._ZNK11flexbuffers9Reference7AsInt64Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = flexbuffers::Reference::AsInt64() const &rArr; strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsString() const
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[2d2]"></a>flexbuffers::Reference::AsDouble() const</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, detection_postprocess.o(.text._ZNK11flexbuffers9Reference8AsDoubleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flexbuffers::Reference::AsDouble() const &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[418]"></a>flexbuffers::Reference::AsString() const</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, detection_postprocess.o(.text._ZNK11flexbuffers9Reference8AsStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flexbuffers::Reference::AsString() const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>

<P><STRONG><a name="[2d1]"></a>flexbuffers::Reference::AsUInt64() const</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, detection_postprocess.o(.text._ZNK11flexbuffers9Reference8AsUInt64Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = flexbuffers::Reference::AsUInt64() const &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsString() const
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[1d1]"></a>tflite::OpResolver::GetDelegates(int) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite10OpResolver12GetDelegatesEi))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d2]"></a>tflite::OpResolver::GetDelegateCreators() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite10OpResolver19GetDelegateCreatorsEv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d6]"></a>tflite::OpResolver::MayContainUserDefinedOps() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d3]"></a>tflite::OpResolver::GetOpaqueDelegateCreators() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite10OpResolver25GetOpaqueDelegateCreatorsEv))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1cf]"></a>tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d0]"></a>tflite::MicroOpResolver::FindOp(char const*, int) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, all_ops_resolver.o(.text._ZNK6tflite15MicroOpResolver6FindOpEPKci))
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[3d1]"></a>tflite::MicroInterpreter::inputs_size() const</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZNK6tflite16MicroInterpreter11inputs_sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::inputs_size() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[3d2]"></a>tflite::MicroInterpreter::outputs_size() const</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZNK6tflite16MicroInterpreter12outputs_sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::outputs_size() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[3e2]"></a>tflite::FlexbufferWrapper::ElementAsInt32(unsigned int) const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZNK6tflite17FlexbufferWrapper14ElementAsInt32Ej))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CircularBufferInit(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[1d9]"></a>tflite::MicroMutableOpResolver&lang;128u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;128u&rang;::GetOpDataParser(tflite::BuiltinOperator) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d7]"></a>tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(tflite::BuiltinOperator) const</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(tflite::BuiltinOperator) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[1d8]"></a>tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(char const*) const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, all_ops_resolver.o(.text._ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::MicroMutableOpResolver&lang;128u&rang;::FindOp(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_ops_resolver.o(.rodata._ZTVN6tflite14AllOpsResolverE)
</UL>
<P><STRONG><a name="[201]"></a>tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[203]"></a>tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1fe]"></a>tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[200]"></a>tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[206]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[205]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[204]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[207]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[31b]"></a>void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const</STRONG> (Thumb, 622 bytes, Stack size 64 bytes, sub.o(.text._ZZN6tflite13reference_ops21BroadcastQuantSubSlowIaLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ENKUlPiE_clESC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[31d]"></a>void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)::'lambda'(int*)::operator()(int*) const</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, sub.o(.text._ZZN6tflite13reference_ops21BroadcastQuantSubSlowIsLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ENKUlPiE_clESC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)::'lambda'(int*)::operator()(int*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastQuantSubSlow&lang;short, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
</UL>

<P><STRONG><a name="[328]"></a>void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, div.o(.text._ZZN6tflite13reference_ops25BroadcastDivSlowQuantizedIaLi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ENKUlPiE_clESC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)::'lambda'(int*)::operator()(int*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemmlowp::FixedPoint&lang;int, 0&rang; gemmlowp::one_over_one_plus_x_for_x_in_0_1&lang;int&rang;(gemmlowp::FixedPoint&lang;int, 0&rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
</UL>

<P><STRONG><a name="[41c]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[291]"></a>arm_avgpool_s8</STRONG> (Thumb, 1200 bytes, Stack size 280 bytes, arm_avgpool_s8.o(.text.arm_avgpool_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = arm_avgpool_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[285]"></a>arm_avgpool_s8_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_avgpool_s8.o(.text.arm_avgpool_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[41d]"></a>arm_convolve_1_x_n_s8</STRONG> (Thumb, 840 bytes, Stack size 304 bytes, arm_convolve_1_x_n_s8.o(.text.arm_convolve_1_x_n_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = arm_convolve_1_x_n_s8 &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mul_core_1x_s8
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
</UL>

<P><STRONG><a name="[425]"></a>arm_convolve_1_x_n_s8_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_convolve_1_x_n_s8.o(.text.arm_convolve_1_x_n_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8_get_buffer_size
</UL>

<P><STRONG><a name="[28e]"></a>arm_convolve_1x1_s8_fast</STRONG> (Thumb, 418 bytes, Stack size 112 bytes, arm_convolve_1x1_s8_fast.o(.text.arm_convolve_1x1_s8_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = arm_convolve_1x1_s8_fast &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mul_core_1x_s8
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2df]"></a>arm_convolve_1x1_s8_fast_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_convolve_1x1_s8_fast.o(.text.arm_convolve_1x1_s8_fast_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8_get_buffer_size
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[422]"></a>arm_convolve_s16</STRONG> (Thumb, 808 bytes, Stack size 232 bytes, arm_convolve_s16.o(.text.arm_convolve_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arm_convolve_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16
</UL>

<P><STRONG><a name="[423]"></a>arm_convolve_s16_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_convolve_s16.o(.text.arm_convolve_s16_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16_get_buffer_size
</UL>

<P><STRONG><a name="[420]"></a>arm_convolve_s8</STRONG> (Thumb, 740 bytes, Stack size 248 bytes, arm_convolve_s8.o(.text.arm_convolve_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = arm_convolve_s8 &rArr; arm_nn_mat_mult_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_s8
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mul_core_4x_s8
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
</UL>

<P><STRONG><a name="[424]"></a>arm_convolve_s8_get_buffer_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arm_convolve_s8.o(.text.arm_convolve_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8_get_buffer_size
</UL>

<P><STRONG><a name="[2a1]"></a>arm_convolve_wrapper_s16</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, arm_convolve_wrapper_s16.o(.text.arm_convolve_wrapper_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = arm_convolve_wrapper_s16 &rArr; arm_convolve_s16
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2d9]"></a>arm_convolve_wrapper_s16_get_buffer_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_convolve_wrapper_s16.o(.text.arm_convolve_wrapper_s16_get_buffer_size))
<BR><BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s16_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29b]"></a>arm_convolve_wrapper_s8</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, arm_convolve_wrapper_s8.o(.text.arm_convolve_wrapper_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = arm_convolve_wrapper_s8 &rArr; arm_convolve_1_x_n_s8 &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2d8]"></a>arm_convolve_wrapper_s8_get_buffer_size</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, arm_convolve_wrapper_s8.o(.text.arm_convolve_wrapper_s8_get_buffer_size))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8_get_buffer_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast_get_buffer_size
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2a3]"></a>arm_depthwise_conv_s16</STRONG> (Thumb, 1008 bytes, Stack size 344 bytes, arm_depthwise_conv_s16.o(.text.arm_depthwise_conv_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = arm_depthwise_conv_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[429]"></a>arm_depthwise_conv_s8</STRONG> (Thumb, 1488 bytes, Stack size 288 bytes, arm_depthwise_conv_s8.o(.text.arm_depthwise_conv_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = arm_depthwise_conv_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
</UL>

<P><STRONG><a name="[426]"></a>arm_depthwise_conv_s8_opt</STRONG> (Thumb, 828 bytes, Stack size 216 bytes, arm_depthwise_conv_s8_opt.o(.text.arm_depthwise_conv_s8_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = arm_depthwise_conv_s8_opt &rArr; arm_nn_depthwise_conv_nt_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_depthwise_conv_nt_t_s8
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_depthwise_conv_nt_t_padded_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
</UL>

<P><STRONG><a name="[42a]"></a>arm_depthwise_conv_s8_opt_get_buffer_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, arm_depthwise_conv_s8_opt.o(.text.arm_depthwise_conv_s8_opt_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8_get_buffer_size
</UL>

<P><STRONG><a name="[29d]"></a>arm_depthwise_conv_wrapper_s8</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, arm_depthwise_conv_wrapper_s8.o(.text.arm_depthwise_conv_wrapper_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = arm_depthwise_conv_wrapper_s8 &rArr; arm_depthwise_conv_s8_opt &rArr; arm_nn_depthwise_conv_nt_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2db]"></a>arm_depthwise_conv_wrapper_s8_get_buffer_size</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, arm_depthwise_conv_wrapper_s8.o(.text.arm_depthwise_conv_wrapper_s8_get_buffer_size))
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[294]"></a>arm_elementwise_add_s8</STRONG> (Thumb, 288 bytes, Stack size 144 bytes, arm_elementwise_add_s8.o(.text.arm_elementwise_add_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arm_elementwise_add_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[283]"></a>arm_elementwise_mul_s8</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, arm_elementwise_mul_s8.o(.text.arm_elementwise_mul_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_elementwise_mul_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[290]"></a>arm_fully_connected_s16</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, arm_fully_connected_s16.o(.text.arm_fully_connected_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_fully_connected_s16 &rArr; arm_nn_vec_mat_mult_t_s16
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_vec_mat_mult_t_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt16(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2dd]"></a>arm_fully_connected_s16_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_fully_connected_s16.o(.text.arm_fully_connected_s16_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[28d]"></a>arm_fully_connected_s8</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, arm_fully_connected_s8.o(.text.arm_fully_connected_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = arm_fully_connected_s8 &rArr; arm_nn_vec_mat_mult_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_vec_mat_mult_t_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2de]"></a>arm_fully_connected_s8_get_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_fully_connected_s8.o(.text.arm_fully_connected_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[279]"></a>arm_max_pool_s8</STRONG> (Thumb, 348 bytes, Stack size 100 bytes, arm_max_pool_s8.o(.text.arm_max_pool_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = arm_max_pool_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[427]"></a>arm_nn_depthwise_conv_nt_t_padded_s8</STRONG> (Thumb, 566 bytes, Stack size 176 bytes, arm_nn_depthwise_conv_nt_t_padded_s8.o(.text.arm_nn_depthwise_conv_nt_t_padded_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = arm_nn_depthwise_conv_nt_t_padded_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
</UL>

<P><STRONG><a name="[428]"></a>arm_nn_depthwise_conv_nt_t_s8</STRONG> (Thumb, 576 bytes, Stack size 208 bytes, arm_nn_depthwise_conv_nt_t_s8.o(.text.arm_nn_depthwise_conv_nt_t_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = arm_nn_depthwise_conv_nt_t_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
</UL>

<P><STRONG><a name="[41f]"></a>arm_nn_mat_mul_core_1x_s8</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, arm_nn_mat_mul_core_1x_s8.o(.text.arm_nn_mat_mul_core_1x_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_nn_mat_mul_core_1x_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
</UL>

<P><STRONG><a name="[41e]"></a>arm_nn_mat_mul_core_4x_s8</STRONG> (Thumb, 356 bytes, Stack size 112 bytes, arm_nn_mat_mul_core_4x_s8.o(.text.arm_nn_mat_mul_core_4x_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
</UL>

<P><STRONG><a name="[421]"></a>arm_nn_mat_mult_s8</STRONG> (Thumb, 600 bytes, Stack size 120 bytes, arm_nn_mat_mult_s8.o(.text.arm_nn_mat_mult_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = arm_nn_mat_mult_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>

<P><STRONG><a name="[42d]"></a>arm_nn_softmax_common_s8</STRONG> (Thumb, 2764 bytes, Stack size 116 bytes, arm_nn_softmax_common_s8.o(.text.arm_nn_softmax_common_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_nn_softmax_common_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8_s16
</UL>

<P><STRONG><a name="[42b]"></a>arm_nn_vec_mat_mult_t_s16</STRONG> (Thumb, 242 bytes, Stack size 52 bytes, arm_nn_vec_mat_mult_t_s16.o(.text.arm_nn_vec_mat_mult_t_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arm_nn_vec_mat_mult_t_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s16
</UL>

<P><STRONG><a name="[42c]"></a>arm_nn_vec_mat_mult_t_s8</STRONG> (Thumb, 932 bytes, Stack size 128 bytes, arm_nn_vec_mat_mult_t_s8.o(.text.arm_nn_vec_mat_mult_t_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arm_nn_vec_mat_mult_t_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_s8
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s8
</UL>

<P><STRONG><a name="[42e]"></a>arm_nn_vec_mat_mult_t_svdf_s8</STRONG> (Thumb, 884 bytes, Stack size 136 bytes, arm_nn_vec_mat_mult_t_svdf_s8.o(.text.arm_nn_vec_mat_mult_t_svdf_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = arm_nn_vec_mat_mult_t_svdf_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_state_s16_s8
</UL>

<P><STRONG><a name="[27c]"></a>arm_softmax_s16</STRONG> (Thumb, 586 bytes, Stack size 100 bytes, arm_softmax_s16.o(.text.arm_softmax_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = arm_softmax_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[27b]"></a>arm_softmax_s8</STRONG> (Thumb, 4978 bytes, Stack size 728 bytes, arm_softmax_s8.o(.text.arm_softmax_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = arm_softmax_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[27d]"></a>arm_softmax_s8_s16</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, arm_softmax_s8_s16.o(.text.arm_softmax_s8_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = arm_softmax_s8_s16 &rArr; arm_nn_softmax_common_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_softmax_common_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[288]"></a>arm_svdf_s8</STRONG> (Thumb, 900 bytes, Stack size 176 bytes, arm_svdf_s8.o(.text.arm_svdf_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arm_svdf_s8 &rArr; arm_nn_vec_mat_mult_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_vec_mat_mult_t_s8
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
</UL>

<P><STRONG><a name="[289]"></a>arm_svdf_state_s16_s8</STRONG> (Thumb, 892 bytes, Stack size 168 bytes, arm_svdf_state_s16_s8.o(.text.arm_svdf_state_s16_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arm_svdf_state_s16_s8 &rArr; arm_nn_vec_mat_mult_t_svdf_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_vec_mat_mult_t_svdf_s8
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
</UL>

<P><STRONG><a name="[219]"></a>main</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = main &rArr; tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::ErrorReporter*, tflite::MicroResourceVariables*, tflite::MicroProfiler*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllOpsResolver::AllOpsResolver()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3fa]"></a>__cxa_guard_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DETECTION_POSTPROCESS()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CIRCULAR_BUFFER()
</UL>

<P><STRONG><a name="[3fb]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DETECTION_POSTPROCESS()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CIRCULAR_BUFFER()
</UL>

<P><STRONG><a name="[436]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[439]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[402]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b4]"></a>__hardfp_exp</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[274]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Softmax(tflite::SoftmaxParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
</UL>

<P><STRONG><a name="[483]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[2d4]"></a>__hardfp_expm1f</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, expm1f.o(i.__hardfp_expm1f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_expm1f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b9]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float tflite::reference_ops::FloorMod&lang;float&rang;(float, float)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3e3]"></a>__hardfp_frexp</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, frexp.o(i.__hardfp_frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateArithmeticOpDataLogistic(TfLiteContext*, TfLiteNode*, tflite::OpDataLogistic*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[25e]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CheckedLog2(float, int*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[484]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[403]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[30e]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Normalization(tflite::L2NormalizationParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Pool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
</UL>

<P><STRONG><a name="[3f6]"></a>__hardfp_tanhf</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tanhf.o(i.__hardfp_tanhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_tanhf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ops::micro::activations::TanhEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[435]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[432]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[433]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[434]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[43b]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[431]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[430]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[438]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[437]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[42f]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[70]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[3e7]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsDouble() const
</UL>

<P><STRONG><a name="[485]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[419]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsDouble() const
</UL>

<P><STRONG><a name="[486]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[43e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
</UL>

<P><STRONG><a name="[43c]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[20e]"></a>_fp_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpinit_81m.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[487]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[488]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[43a]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[3e4]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>

<P><STRONG><a name="[43d]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[41b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
</UL>

<P><STRONG><a name="[43f]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>tflite::(anonymous namespace)::ReluInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, activations.o(.text._ZN6tflite12_GLOBAL__N_18ReluInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::ReluInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite13Register_RELUEv)
</UL>
<P><STRONG><a name="[98]"></a>tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, activations.o(.text._ZN6tflite12_GLOBAL__N_18ReluEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::ReluEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluQuantized(tflite::ReluOpData const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, signed char const*, signed char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReluFloat(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite13Register_RELUEv)
</UL>
<P><STRONG><a name="[f9]"></a>tflite::(anonymous namespace)::Relu6Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, activations.o(.text._ZN6tflite12_GLOBAL__N_19Relu6InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Relu6Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite14Register_RELU6Ev)
</UL>
<P><STRONG><a name="[fb]"></a>tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, activations.o(.text._ZN6tflite12_GLOBAL__N_19Relu6EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Relu6Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Relu6Quantized(signed char, signed char, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Relu6Float(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activations.o(.text._ZN6tflite14Register_RELU6Ev)
</UL>
<P><STRONG><a name="[f4]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 872 bytes, Stack size 72 bytes, add_n.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add_n.o(.text._ZN6tflite14Register_ADD_NEv)
</UL>
<P><STRONG><a name="[f5]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1020 bytes, Stack size 192 bytes, add_n.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddN(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, unsigned int, signed char const* const*, signed char*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add_n.o(.text._ZN6tflite14Register_ADD_NEv)
</UL>
<P><STRONG><a name="[155]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 724 bytes, Stack size 72 bytes, assign_variable.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Allocate(int, TfLiteContext*, TfLiteTensor const*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assign_variable.o(.text._ZN6tflite24Register_ASSIGN_VARIABLEEv)
</UL>
<P><STRONG><a name="[156]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, assign_variable.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Assign(int, TfLiteEvalTensor const*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assign_variable.o(.text._ZN6tflite24Register_ASSIGN_VARIABLEEv)
</UL>
<P><STRONG><a name="[161]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, batch_to_space_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batch_to_space_nd.o(.text._ZN6tflite26Register_BATCH_TO_SPACE_NDEv)
</UL>
<P><STRONG><a name="[162]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 268 bytes, Stack size 144 bytes, batch_to_space_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;signed char&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BatchToSpaceND&lang;float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batch_to_space_nd.o(.text._ZN6tflite26Register_BATCH_TO_SPACE_NDEv)
</UL>
<P><STRONG><a name="[14c]"></a>tflite::(anonymous namespace)::BroadcastArgsPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, broadcast_args.o(.text._ZN6tflite12_GLOBAL__N_120BroadcastArgsPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::(anonymous namespace)::BroadcastArgsPrepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> broadcast_args.o(.text._ZN6tflite23Register_BROADCAST_ARGSEv)
</UL>
<P><STRONG><a name="[14d]"></a>tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, broadcast_args.o(.text._ZN6tflite12_GLOBAL__N_117BroadcastArgsEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::BroadcastArgsEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastArgs&lang;long long&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastArgs&lang;long long&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastArgs&lang;int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> broadcast_args.o(.text._ZN6tflite23Register_BROADCAST_ARGSEv)
</UL>
<P><STRONG><a name="[148]"></a>tflite::(anonymous namespace)::BroadcastToPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 752 bytes, Stack size 80 bytes, broadcast_to.o(.text._ZN6tflite12_GLOBAL__N_118BroadcastToPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::BroadcastToPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> broadcast_to.o(.text._ZN6tflite21Register_BROADCAST_TOEv)
</UL>
<P><STRONG><a name="[149]"></a>tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, broadcast_to.o(.text._ZN6tflite12_GLOBAL__N_115BroadcastToEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::BroadcastToEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType) &rArr; void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) &rArr;  void tflite::reference_ops::BroadcastImpl&lang;5&rang;(tflite::NdArrayDesc&lang;5&rang; const&, char const*, tflite::NdArrayDesc&lang;5&rang; const&, char*, int*, int, int, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastTo&lang;5&rang;(tflite::RuntimeShape const&, char const*, tflite::RuntimeShape const&, char*, TfLiteType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> broadcast_to.o(.text._ZN6tflite21Register_BROADCAST_TOEv)
</UL>
<P><STRONG><a name="[11c]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, call_once.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
</UL>
<P><STRONG><a name="[11d]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, call_once.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
</UL>
<P><STRONG><a name="[11e]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, call_once.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> call_once.o(.text._ZN6tflite18Register_CALL_ONCEEv)
</UL>
<P><STRONG><a name="[91]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, cast.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cast.o(.text._ZN6tflite13Register_CASTEv)
</UL>
<P><STRONG><a name="[92]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2384 bytes, Stack size 128 bytes, cast.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cast.o(.text._ZN6tflite13Register_CASTEv)
</UL>
<P><STRONG><a name="[292]"></a>tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 520 bytes, Stack size 312 bytes, add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_elementwise_add_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[295]"></a>tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 252 bytes, Stack size 224 bytes, add.o(.text._ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::AddGeneralParamScale(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_small_integer&lang;short&rang;::value, void&rang;::type tflite::reference_ops::BroadcastAdd4DSlow&lang;short&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[10e]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[10f]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 636 bytes, Stack size 224 bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8_get_buffer_size
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16_get_buffer_size
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[110]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 384 bytes, Stack size 240 bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_convolve_wrapper_s8 &rArr; arm_convolve_1_x_n_s8 &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Conv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[2a0]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 376 bytes, Stack size 288 bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_convolve_wrapper_s16 &rArr; arm_convolve_s16
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29a]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 376 bytes, Stack size 288 bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_convolve_wrapper_s8 &rArr; arm_convolve_1_x_n_s8 &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[163]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[164]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 988 bytes, Stack size 264 bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8_get_buffer_size
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MatchingDim(tflite::RuntimeShape const&, int, tflite::RuntimeShape const&, int)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[165]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 316 bytes, Stack size 216 bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_depthwise_conv_wrapper_s8 &rArr; arm_depthwise_conv_s8_opt &rArr; arm_nn_depthwise_conv_nt_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::DepthwiseConv(tflite::DepthwiseParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[29c]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 422 bytes, Stack size 280 bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_depthwise_conv_wrapper_s8 &rArr; arm_depthwise_conv_s8_opt &rArr; arm_nn_depthwise_conv_nt_t_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2a2]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 404 bytes, Stack size 280 bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_depthwise_conv_s16
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s16
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[15c]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fully_connected.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
</UL>
<P><STRONG><a name="[15d]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 752 bytes, Stack size 152 bytes, fully_connected.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s8_get_buffer_size
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s16_get_buffer_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast_get_buffer_size
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataFullyConnected(TfLiteContext*, TfLiteFusedActivation, TfLiteType, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, tflite::OpDataFullyConnected*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
</UL>
<P><STRONG><a name="[15e]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 310 bytes, Stack size 200 bytes, fully_connected.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_convolve_1x1_s8_fast &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::FullyConnected(tflite::FullyConnectedParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FullyConnectedParamsFloat(TfLiteFusedActivation)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt16(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fully_connected.o(.text._ZN6tflite24Register_FULLY_CONNECTEDEv)
</UL>
<P><STRONG><a name="[28c]"></a>tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 656 bytes, Stack size 224 bytes, fully_connected.o(.text._ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedInt8(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_convolve_1x1_s8_fast &rArr; arm_nn_mat_mul_core_4x_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[28f]"></a>tflite::(anonymous namespace)::EvalQuantizedInt16(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 292 bytes, Stack size 168 bytes, fully_connected.o(.text._ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedInt16(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_fully_connected_s16 &rArr; arm_nn_vec_mat_mult_t_s16
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_s16
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[27f]"></a>tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 448 bytes, Stack size 272 bytes, mul.o(.text._ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorSA_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantized(TfLiteContext*, TfLiteNode*, tflite::OpDataMul const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_elementwise_mul_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastMul4DSlow&lang;signed char&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[145]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
<LI> pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
</UL>
<P><STRONG><a name="[157]"></a>tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::AveragePrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avgpool_s8_get_buffer_size
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
</UL>
<P><STRONG><a name="[277]"></a>tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 196 bytes, Stack size 176 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_avgpool_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avgpool_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[158]"></a>tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::AverageEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_avgpool_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AveragePoolingEvalFloat(TfLiteContext const*, TfLiteNode const*, TfLitePoolParams const*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::AverageEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite24Register_AVERAGE_POOL_2DEv)
</UL>
<P><STRONG><a name="[146]"></a>tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
</UL>
<P><STRONG><a name="[278]"></a>tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 190 bytes, Stack size 176 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; arm_max_pool_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_max_pool_s8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[147]"></a>tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalInt8(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
</UL>
<P><STRONG><a name="[111]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[112]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 640 bytes, Stack size 112 bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) &rArr; tflite::PreprocessSoftmaxScaling(double, double, int, int*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[113]"></a>tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 272 bytes, Stack size 152 bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*) &rArr; arm_softmax_s8
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8_s16
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s16
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::Softmax(tflite::SoftmaxParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[99]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, svdf.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svdf.o(.text._ZN6tflite13Register_SVDFEv)
</UL>
<P><STRONG><a name="[9b]"></a>tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, svdf.o(.text._ZN6tflite12_GLOBAL__N_18EvalSvdfEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalFloatSvdfReference(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, int, TfLiteEvalTensor*, TfLiteEvalTensor*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetMutableEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svdf.o(.text._ZN6tflite13Register_SVDFEv)
</UL>
<P><STRONG><a name="[287]"></a>tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&)</STRONG> (Thumb, 352 bytes, Stack size 248 bytes, svdf.o(.text._ZN6tflite12_GLOBAL__N_115EvalIntegerSVDFEP13TfLiteContextP10TfLiteNodePK16TfLiteEvalTensorS7_S7_S7_PK16TfLiteSVDFParamsPS5_SB_RKNS_10OpDataSvdfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalIntegerSVDF(TfLiteContext*, TfLiteNode*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteSVDFParams const*, TfLiteEvalTensor*, TfLiteEvalTensor*, tflite::OpDataSvdf const&) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_state_s16_s8
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_svdf_s8
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalSvdf(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[184]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2420 bytes, Stack size 128 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::EqualEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::EqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::EqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::EqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::EqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro14Register_EQUALEv)
</UL>
<P><STRONG><a name="[19f]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2420 bytes, Stack size 128 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::NotEqualEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;bool, &(bool tflite::reference_ops::NotEqualFn&lang;bool&rang;(bool, bool))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::NotEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::NotEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::NotEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro18Register_NOT_EQUALEv)
</UL>
<P><STRONG><a name="[198]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1834 bytes, Stack size 120 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro16Register_GREATEREv)
</UL>
<P><STRONG><a name="[1a6]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1820 bytes, Stack size 120 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::GreaterEqualEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::GreaterEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::GreaterEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::GreaterEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro22Register_GREATER_EQUALEv)
</UL>
<P><STRONG><a name="[17e]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1820 bytes, Stack size 120 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::LessEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro13Register_LESSEv)
</UL>
<P><STRONG><a name="[1a0]"></a>tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1834 bytes, Stack size 120 bytes, comparisons.o(.text._ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::comparisons::(anonymous namespace)::LessEqualEval(TfLiteContext*, TfLiteNode*) &rArr; void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*) &rArr; tflite::reference_ops::BroadcastComparison4DSlowPreprocess(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;long long, &(bool tflite::reference_ops::LessEqualFn&lang;long long&rang;(long long, long long))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;int, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastComparison4DSlowImpl&lang;float, &(bool tflite::reference_ops::LessEqualFn&lang;float&rang;(float, float))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ComparisonWithScaling&lang;signed char, &(bool tflite::reference_ops::LessEqualFn&lang;int&rang;(int, int))&rang;(tflite::ComparisonParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, bool*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comparisons.o(.text._ZN6tflite3ops5micro19Register_LESS_EQUALEv)
</UL>
<P><STRONG><a name="[103]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1096 bytes, Stack size 104 bytes, cumsum.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cumsum.o(.text._ZN6tflite15Register_CUMSUMEv)
</UL>
<P><STRONG><a name="[104]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 228 bytes, Stack size 168 bytes, cumsum.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::CumSum(tflite::ArithmeticParams const&, signed char const*, tflite::RuntimeShape const&, int, bool, bool, signed char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::CumSum&lang;float&rang;(float const*, tflite::RuntimeShape const&, int, bool, bool, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cumsum.o(.text._ZN6tflite15Register_CUMSUMEv)
</UL>
<P><STRONG><a name="[14e]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, depth_to_space.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depth_to_space.o(.text._ZN6tflite23Register_DEPTH_TO_SPACEEv)
</UL>
<P><STRONG><a name="[14f]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, depth_to_space.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;signed char&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DepthToSpace&lang;float&rang;(tflite::DepthToSpaceParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depth_to_space.o(.text._ZN6tflite23Register_DEPTH_TO_SPACEEv)
</UL>
<P><STRONG><a name="[16c]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; flexbuffers::Reference::AsUInt64() const &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsDouble() const
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsUInt64() const
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Map::operator[](char const*) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
</UL>
<P><STRONG><a name="[16d]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
</UL>
<P><STRONG><a name="[16e]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2708 bytes, Stack size 264 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int) &rArr; void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) &rArr;  void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detection_postprocess.o(.text._ZN6tflite30Register_DETECTION_POSTPROCESSEv)
</UL>
<P><STRONG><a name="[2a4]"></a>tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int)</STRONG> (Thumb, 1964 bytes, Stack size 88 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_134NonMaxSuppressionSingleClassHelperEP13TfLiteContextP10TfLiteNodePNS0_6OpDataEPKfPiS9_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int) &rArr; void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) &rArr;  void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29e]"></a>tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_124DecreasingPartialArgSortEPKfiiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*) &rArr; void std::__2::__sift_down&lang;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, int*&rang;(int*, tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, std::__2::iterator_traits&lang;int*&rang;::difference_type, int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__sift_down&lang;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, int*&rang;(int*, tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, std::__2::iterator_traits&lang;int*&rang;::difference_type, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2a5]"></a>void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)</STRONG> (Thumb, 918 bytes, Stack size 48 bytes, detection_postprocess.o(.text._ZN6tflite12_GLOBAL__N_19MergeSortIZNS0_17DecreasingArgSortEPKfiPiS4_E3$_1EEvS4_S4_iT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) &rArr;  void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::MergeSort&lang;tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1&rang;(int*, int*, int, tflite::(anonymous namespace)::DecreasingArgSort(float const*, int, int*, int*)::$_1)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::NonMaxSuppressionSingleClassHelper(TfLiteContext*, TfLiteNode*, tflite::(anonymous namespace)::OpData*, float const*, int*, int*, int)
</UL>

<P><STRONG><a name="[29f]"></a>void std::__2::__sift_down&lang;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, int*&rang;(int*, tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, std::__2::iterator_traits&lang;int*&rang;::difference_type, int*)</STRONG> (Thumb, 328 bytes, Stack size 36 bytes, detection_postprocess.o(.text._ZNSt3__211__sift_downIRZN6tflite12_GLOBAL__N_124DecreasingPartialArgSortEPKfiiPiE3$_0S5_EEvT0_T_NS_15iterator_traitsIS8_E15difference_typeES8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = void std::__2::__sift_down&lang;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, int*&rang;(int*, tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)::$_0&, std::__2::iterator_traits&lang;int*&rang;::difference_type, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::DecreasingPartialArgSort(float const*, int, int, int*)
</UL>

<P><STRONG><a name="[77]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, div.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> div.o(.text._ZN6tflite12Register_DIVEv)
</UL>
<P><STRONG><a name="[78]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, div.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> div.o(.text._ZN6tflite12Register_DIVEv)
</UL>
<P><STRONG><a name="[79]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1232 bytes, Stack size 248 bytes, div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::DivElementwise&lang;signed char&rang;(int, tflite::ArithmeticParams const&, signed char const*, signed char const*, signed char*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlow&lang;float, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastDivSlowQuantized&lang;signed char, 5&rang;(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> div.o(.text._ZN6tflite12Register_DIVEv)
</UL>
<P><STRONG><a name="[16f]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::ElementWiseAbsRsqrtInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_123ElementWiseAbsRsqrtInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::ElementWiseAbsRsqrtInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
<LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
</UL>
<P><STRONG><a name="[170]"></a>TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1120 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_115PrepareAbsRsqrtIXadL_ZNS3_18IsAbsSupportedTypeE10TfLiteTypeEELi0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsAbsSupportedType(TfLiteType)), 0&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
</UL>
<P><STRONG><a name="[171]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1180 bytes, Stack size 56 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::AbsEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_ABSEv)
</UL>
<P><STRONG><a name="[172]"></a>TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsNumericSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 5]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_SINEv)
<LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_COSEv)
<LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_LOGEv)
<LI> elementwise.o(.text._ZN6tflite3ops5micro13Register_SQRTEv)
<LI> elementwise.o(.text._ZN6tflite3ops5micro15Register_SQUAREEv)
</UL>
<P><STRONG><a name="[179]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::SinEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_SINEv)
</UL>
<P><STRONG><a name="[173]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::CosEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_COSEv)
</UL>
<P><STRONG><a name="[174]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::LogEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro12Register_LOGEv)
</UL>
<P><STRONG><a name="[180]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::SqrtEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro13Register_SQRTEv)
</UL>
<P><STRONG><a name="[188]"></a>TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1144 bytes, Stack size 56 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_115PrepareAbsRsqrtIXadL_ZNS3_20IsRsqrtSupportedTypeE10TfLiteTypeEELi1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::PrepareAbsRsqrt&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsRsqrtSupportedType(TfLiteType)), 1&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
</UL>
<P><STRONG><a name="[189]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1134 bytes, Stack size 80 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::RsqrtEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetInvSqrtQuantizedMultiplierExp(int, int, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro14Register_RSQRTEv)
</UL>
<P><STRONG><a name="[18c]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::SquareEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro15Register_SQUAREEv)
</UL>
<P><STRONG><a name="[1a1]"></a>TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsLogicalSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = TfLiteStatus tflite::ops::micro::elementwise::(anonymous namespace)::GenericPrepare&lang;&(tflite::ops::micro::elementwise::(anonymous namespace)::IsLogicalSupportedType(TfLiteType))&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro20Register_LOGICAL_NOTEv)
</UL>
<P><STRONG><a name="[1a2]"></a>tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, elementwise.o(.text._ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::elementwise::(anonymous namespace)::LogicalNotEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elementwise.o(.text._ZN6tflite3ops5micro20Register_LOGICAL_NOTEv)
</UL>
<P><STRONG><a name="[7a]"></a>tflite::(anonymous namespace)::EluInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, elu.o(.text._ZN6tflite12_GLOBAL__N_17EluInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EluInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elu.o(.text._ZN6tflite12Register_ELUEv)
</UL>
<P><STRONG><a name="[7b]"></a>tflite::(anonymous namespace)::EluPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, elu.o(.text._ZN6tflite12_GLOBAL__N_110EluPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tflite::(anonymous namespace)::EluPrepare(TfLiteContext*, TfLiteNode*) &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elu.o(.text._ZN6tflite12Register_ELUEv)
</UL>
<P><STRONG><a name="[7c]"></a>tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 596 bytes, Stack size 80 bytes, elu.o(.text._ZN6tflite12_GLOBAL__N_17EluEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EluEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expm1f
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elu.o(.text._ZN6tflite12Register_ELUEv)
</UL>
<P><STRONG><a name="[7d]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, exp.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exp.o(.text._ZN6tflite12Register_EXPEv)
</UL>
<P><STRONG><a name="[7e]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, exp.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exp.o(.text._ZN6tflite12Register_EXPEv)
</UL>
<P><STRONG><a name="[142]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 756 bytes, Stack size 112 bytes, expand_dims.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expand_dims.o(.text._ZN6tflite20Register_EXPAND_DIMSEv)
</UL>
<P><STRONG><a name="[143]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, expand_dims.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expand_dims.o(.text._ZN6tflite20Register_EXPAND_DIMSEv)
</UL>
<P><STRONG><a name="[93]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1604 bytes, Stack size 72 bytes, fill.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fill.o(.text._ZN6tflite13Register_FILLEv)
</UL>
<P><STRONG><a name="[94]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, fill.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fill.o(.text._ZN6tflite13Register_FILLEv)
</UL>
<P><STRONG><a name="[11f]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, floor_div.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
</UL>
<P><STRONG><a name="[120]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, floor_div.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
</UL>
<P><STRONG><a name="[121]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 864 bytes, Stack size 120 bytes, floor_div.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor_div.o(.text._ZN6tflite18Register_FLOOR_DIVEv)
</UL>
<P><STRONG><a name="[122]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
</UL>
<P><STRONG><a name="[123]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, floor_mod.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
</UL>
<P><STRONG><a name="[124]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 612 bytes, Stack size 136 bytes, floor_mod.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::HaveSameShapes(TfLiteEvalTensor const*, TfLiteEvalTensor const*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floor_mod.o(.text._ZN6tflite18Register_FLOOR_MODEv)
</UL>
<P><STRONG><a name="[105]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1108 bytes, Stack size 64 bytes, gather.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gather.o(.text._ZN6tflite15Register_GATHEREv)
</UL>
<P><STRONG><a name="[106]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1330 bytes, Stack size 96 bytes, gather.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gather.o(.text._ZN6tflite15Register_GATHEREv)
</UL>
<P><STRONG><a name="[125]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, gather_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gather_nd.o(.text._ZN6tflite18Register_GATHER_NDEv)
</UL>
<P><STRONG><a name="[126]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 960 bytes, Stack size 72 bytes, gather_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gather_nd.o(.text._ZN6tflite18Register_GATHER_NDEv)
</UL>
<P><STRONG><a name="[12f]"></a>tflite::(anonymous namespace)::HardSwishInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hard_swish.o(.text._ZN6tflite12_GLOBAL__N_113HardSwishInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::HardSwishInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
</UL>
<P><STRONG><a name="[131]"></a>tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 524 bytes, Stack size 112 bytes, hard_swish.o(.text._ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::HardSwishEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::HardSwish&lang;signed char&rang;(tflite::HardSwishParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_swish.o(.text._ZN6tflite19Register_HARD_SWISHEv)
</UL>
<P><STRONG><a name="[71]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, if.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if.o(.text._ZN6tflite11Register_IFEv)
</UL>
<P><STRONG><a name="[72]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 948 bytes, Stack size 88 bytes, if.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if.o(.text._ZN6tflite11Register_IFEv)
</UL>
<P><STRONG><a name="[73]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, if.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if.o(.text._ZN6tflite11Register_IFEv)
</UL>
<P><STRONG><a name="[132]"></a>tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 656 bytes, Stack size 104 bytes, l2_pool_2d.o(.text._ZN6tflite12_GLOBAL__N_19L2PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::L2Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ComputePaddingHeightWidth(int, int, int, int, int, int, int, int, TfLitePadding, int*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2_pool_2d.o(.text._ZN6tflite19Register_L2_POOL_2DEv)
</UL>
<P><STRONG><a name="[133]"></a>tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 260 bytes, Stack size 120 bytes, l2_pool_2d.o(.text._ZN6tflite12_GLOBAL__N_16L2EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::L2Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::L2Pool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2_pool_2d.o(.text._ZN6tflite19Register_L2_POOL_2DEv)
</UL>
<P><STRONG><a name="[137]"></a>tflite::(anonymous namespace)::LogicalOrEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logical.o(.text._ZN6tflite12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::LogicalOrEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool)) &rArr; void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logical.o(.text._ZN6tflite19Register_LOGICAL_OREv)
</UL>
<P><STRONG><a name="[144]"></a>tflite::(anonymous namespace)::LogicalAndEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logical.o(.text._ZN6tflite12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::LogicalAndEval(TfLiteContext*, TfLiteNode*) &rArr; tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool)) &rArr; void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;bool, bool, bool&rang;(tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool const*, tflite::RuntimeShape const&, bool*, bool (*)(bool, bool)) &rArr; void tflite::NdArrayDescsForElementwiseBroadcast&lang;4&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::NdArrayDesc&lang;4&rang;*, tflite::NdArrayDesc&lang;4&rang;*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LogicalImpl(TfLiteContext*, TfLiteNode*, bool (*)(bool, bool))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logical.o(.text._ZN6tflite20Register_LOGICAL_ANDEv)
</UL>
<P><STRONG><a name="[116]"></a>tflite::(anonymous namespace)::LogisticInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logistic.o(.text._ZN6tflite12_GLOBAL__N_112LogisticInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::LogisticInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
</UL>
<P><STRONG><a name="[118]"></a>tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1356 bytes, Stack size 216 bytes, logistic.o(.text._ZN6tflite12_GLOBAL__N_112LogisticEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::LogisticEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::Logistic(int, int, int, int, int, signed char const*, signed char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logistic.o(.text._ZN6tflite17Register_LOGISTICEv)
</UL>
<P><STRONG><a name="[199]"></a>TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 364 bytes, Stack size 104 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MAXIMUMEv)
</UL>
<P><STRONG><a name="[18e]"></a>float tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;float&rang;(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[18f]"></a>int tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;int&rang;(int, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[190]"></a>long long tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;long long&rang;(long long, long long)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[191]"></a>signed char tflite::ops::micro::maximum_minimum::(anonymous namespace)::MaximumOp::op&lang;signed char&rang;(signed char, signed char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[19a]"></a>TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 364 bytes, Stack size 104 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = TfLiteStatus tflite::ops::micro::maximum_minimum::Eval&lang;(tflite::ops::micro::maximum_minimum::(anonymous namespace)::KernelType)0, tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp&rang;(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;signed char, signed char (*)(signed char, signed char), 5&rang;(tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, signed char (*)(signed char, signed char))
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;long long, long long (*)(long long, long long), 5&rang;(tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, long long*, long long (*)(long long, long long))
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;int, int (*)(int, int), 5&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::MaximumMinimumBroadcastSlow&lang;float, float (*)(float, float), 5&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro16Register_MINIMUMEv)
</UL>
<P><STRONG><a name="[192]"></a>float tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;float&rang;(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[193]"></a>int tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;int&rang;(int, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[194]"></a>long long tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;long long&rang;(long long, long long)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[195]"></a>signed char tflite::ops::micro::maximum_minimum::(anonymous namespace)::MinimumOp::op&lang;signed char&rang;(signed char, signed char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_))
<BR>[Address Reference Count : 1]<UL><LI> maximum_minimum.o(.text._ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[138]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
</UL>
<P><STRONG><a name="[139]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
</UL>
<P><STRONG><a name="[13a]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1572 bytes, Stack size 120 bytes, mirror_pad.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mirror_pad.o(.text._ZN6tflite19Register_MIRROR_PADEv)
</UL>
<P><STRONG><a name="[17f]"></a>tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1864 bytes, Stack size 88 bytes, pack.o(.text._ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::pack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(.text._ZN6tflite3ops5micro13Register_PACKEv)
</UL>
<P><STRONG><a name="[119]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, quantize.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[14a]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, read_variable.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_variable.o(.text._ZN6tflite22Register_READ_VARIABLEEv)
</UL>
<P><STRONG><a name="[14b]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, read_variable.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::Read(int, TfLiteEvalTensor const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_variable.o(.text._ZN6tflite22Register_READ_VARIABLEEv)
</UL>
<P><STRONG><a name="[15f]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, resize_bilinear.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_bilinear.o(.text._ZN6tflite24Register_RESIZE_BILINEAREv)
</UL>
<P><STRONG><a name="[160]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, resize_bilinear.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinearInteger&lang;signed char&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::ResizeBilinear&lang;float&rang;(tflite::ResizeBilinearParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_bilinear.o(.text._ZN6tflite24Register_RESIZE_BILINEAREv)
</UL>
<P><STRONG><a name="[fc]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, shape.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shape.o(.text._ZN6tflite14Register_SHAPEEv)
</UL>
<P><STRONG><a name="[fd]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, shape.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shape.o(.text._ZN6tflite14Register_SHAPEEv)
</UL>
<P><STRONG><a name="[fe]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, slice.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slice.o(.text._ZN6tflite14Register_SLICEEv)
</UL>
<P><STRONG><a name="[ff]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 136 bytes, slice.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;signed char&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;signed char&rang;*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;short&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;short&rang;*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;int&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;int&rang;*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::Slice&lang;float&rang;(tflite::SliceParams const&, tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::SequentialTensorWriter&lang;float&rang;*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slice.o(.text._ZN6tflite14Register_SLICEEv)
</UL>
<P><STRONG><a name="[166]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
</UL>
<P><STRONG><a name="[167]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
</UL>
<P><STRONG><a name="[168]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 284 bytes, Stack size 152 bytes, space_to_batch_nd.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;signed char&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToBatchND&lang;float&rang;(tflite::SpaceToBatchParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space_to_batch_nd.o(.text._ZN6tflite26Register_SPACE_TO_BATCH_NDEv)
</UL>
<P><STRONG><a name="[150]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, space_to_depth.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CreateWritableTensorDimsWithCopy(TfLiteContext*, TfLiteTensor*, TfLiteEvalTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space_to_depth.o(.text._ZN6tflite23Register_SPACE_TO_DEPTHEv)
</UL>
<P><STRONG><a name="[151]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, space_to_depth.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;signed char&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::SpaceToDepth&lang;float&rang;(tflite::SpaceToDepthParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space_to_depth.o(.text._ZN6tflite23Register_SPACE_TO_DEPTHEv)
</UL>
<P><STRONG><a name="[169]"></a>tflite::(anonymous namespace)::SquaredDifferenceInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SquaredDifferenceInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
</UL>
<P><STRONG><a name="[16a]"></a>tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 868 bytes, Stack size 64 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_124SquaredDifferencePrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SquaredDifferencePrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, int*, int*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
</UL>
<P><STRONG><a name="[16b]"></a>tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1372 bytes, Stack size 128 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::BroadcastBinaryFunction4DSlow(tflite::ArithmeticParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&))
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;float, float, float&rang;(tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, float (*)(float, float))
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastBinaryFunction4DSlow&lang;int, int, int&rang;(tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*, int (*)(int, int))
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifference(signed char, signed char, tflite::ArithmeticParams const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite27Register_SQUARED_DIFFERENCEEv)
</UL>
<P><STRONG><a name="[8c]"></a>float tflite::(anonymous namespace)::SquaredDifference&lang;float&rang;(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceIfEET_S2_S2_))
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[8d]"></a>tflite::(anonymous namespace)::SquaredDifference(signed char, signed char, tflite::ArithmeticParams const&)</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceEaaRKNS_16ArithmeticParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SquaredDifference(signed char, signed char, tflite::ArithmeticParams const&) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SquaredDifferenceEval(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[8e]"></a>int tflite::(anonymous namespace)::SquaredDifference&lang;int&rang;(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, squared_difference.o(.text._ZN6tflite12_GLOBAL__N_117SquaredDifferenceIiEET_S2_S2_))
<BR>[Address Reference Count : 1]<UL><LI> squared_difference.o(.text._ZN6tflite12_GLOBAL__N_121SquaredDifferenceEvalEP13TfLiteContextP10TfLiteNode)
</UL>
<P><STRONG><a name="[114]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, squeeze.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squeeze.o(.text._ZN6tflite16Register_SQUEEZEEv)
</UL>
<P><STRONG><a name="[115]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, squeeze.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> squeeze.o(.text._ZN6tflite16Register_SQUEEZEEv)
</UL>
<P><STRONG><a name="[181]"></a>tflite::ops::micro::activations::(anonymous namespace)::TanhInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tanh.o(.text._ZN6tflite3ops5micro11activations12_GLOBAL__N_18TanhInitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::activations::(anonymous namespace)::TanhInit(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
</UL>
<P><STRONG><a name="[182]"></a>tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1144 bytes, Stack size 64 bytes, tanh.o(.text._ZN6tflite3ops5micro11activations12_GLOBAL__N_111TanhPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::activations::(anonymous namespace)::TanhPrepare(TfLiteContext*, TfLiteNode*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CheckedLog2(float, int*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tanh.o(.text._ZN6tflite3ops5micro13Register_TANHEv)
</UL>
<P><STRONG><a name="[12a]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, transpose.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
</UL>
<P><STRONG><a name="[12b]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, transpose.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;int, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, int*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::TransposeImpl&lang;signed char, 5&rang;(tflite::TransposeParams const&, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
</UL>
<P><STRONG><a name="[152]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
</UL>
<P><STRONG><a name="[153]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1604 bytes, Stack size 128 bytes, transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int) &rArr; tflite::QuantizeMultiplier(double, int*, int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, int*, int*, int*, int*, int*, int*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
</UL>
<P><STRONG><a name="[154]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 844 bytes, Stack size 216 bytes, transpose_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_integer_ops::TransposeConv(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, int const*, tflite::RuntimeShape const&, signed char*, tflite::RuntimeShape const&, signed char*, int*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::TransposeConv&lang;long long&rang;(tflite::ConvParams const&, int const*, int const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long long const*, tflite::RuntimeShape const&, short*, tflite::RuntimeShape const&, signed char*, long long*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::TransposeConv(tflite::ConvParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*, tflite::RuntimeShape const&, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose_conv.o(.text._ZN6tflite23Register_TRANSPOSE_CONVEv)
</UL>
<P><STRONG><a name="[18d]"></a>tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1436 bytes, Stack size 80 bytes, unpack.o(.text._ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::ops::micro::unpack::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unpack.o(.text._ZN6tflite3ops5micro15Register_UNPACKEv)
</UL>
<P><STRONG><a name="[13d]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, var_handle.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
</UL>
<P><STRONG><a name="[13e]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, var_handle.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::CreateIdIfNoneFound(char const*, char const*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
</UL>
<P><STRONG><a name="[13f]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, var_handle.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> var_handle.o(.text._ZN6tflite19Register_VAR_HANDLEEv)
</UL>
<P><STRONG><a name="[100]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, while.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> while.o(.text._ZN6tflite14Register_WHILEEv)
</UL>
<P><STRONG><a name="[101]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, while.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> while.o(.text._ZN6tflite14Register_WHILEEv)
</UL>
<P><STRONG><a name="[102]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, while.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int) &rArr; tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpOutputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToOpOutputs(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopySubgraphOutputsToOpOutputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::CopyOpInputsToSubgraphInputs(TfLiteContext*, TfLiteNode*, tflite::MicroGraph*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> while.o(.text._ZN6tflite14Register_WHILEEv)
</UL>
<P><STRONG><a name="[140]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, zeros_like.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zeros_like.o(.text._ZN6tflite19Register_ZEROS_LIKEEv)
</UL>
<P><STRONG><a name="[141]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, zeros_like.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; MicroVsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zeros_like.o(.text._ZN6tflite19Register_ZEROS_LIKEEv)
</UL>
<P><STRONG><a name="[272]"></a>tflite::(anonymous namespace)::CreatePlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::CreatePlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignSizeUp(unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[3bd]"></a>tflite::(anonymous namespace)::CommitPlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::CommitPlan(tflite::ErrorReporter*, tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[1cb]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[1cc]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[1ce]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
